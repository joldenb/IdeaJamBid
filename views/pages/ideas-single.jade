doctype html
html
  head
    include ../partials/head.jade
  body
  .header.navbar.navbar-default
    include ../partials/header.jade

  .container-fluid.idea-summary
    .row
      .edit-column.col-md-4
        .imagesList
          if(imageURLs)
            each imageURL, index in imageURLs
              if index == 0
                .image-summary-image
                  div(id='#{imageURL[0]}' style="height: 300px; width: 400px; background-image : url('" + '#{imageURL[1] || "/avatar.png"}' + "');  background-position: center center; background-repeat: no-repeat; background-size: cover;" + "#{imageURL[2]}")
              if index < 3 && index > 0
                img.imageListItems(src=imageURL[1]  style=imageURL[2])
            span.view-all-images-btn
              a.btn.secondary-btn.btn-default( href="/image-upload" )
                span.glyphicon.glyphicon-plus

        if idea.name && inventorName == user.username
          h3 #{idea.name.charAt(0).toUpperCase() + idea.name.slice(1)} solves the problem of #[a(href='/introduce-idea') #{idea.problem}] by #[a(href='/accomplish') #{idea.description}].
        else if idea.name 
          h3 #{idea.name.charAt(0).toUpperCase() + idea.name.slice(1)} solves the problem of #{idea.problem} by #{idea.description}.
        .idea-summary-left
          h4.underline#componentsHeader Components
          .row 
            .col-xs-10
              if components
                ul
                  each component,index in components
                    if component['text'] && index < 5
                      if component['identifier']
                        li 
                          a(href="/component-profile/"+component['identifier'])
                            h4 #{component['number']} : #{component['text']}
                      else
                        li 
                          h4 #{component['number']} : #{component['text']}
                    else if component['descriptions'].length > 0 && index < 5
                      if component['identifier']
                        li
                          a(href="/component-profile/"+component['identifier'])
                            h4 #{component['descriptions'][0]}
                      else
                        li
                          h4 #{component['descriptions'][0]}
            .col-xs-2
              button(type="button" id="componentModalButton"  class="btn secondary-btn btn-default" data-toggle="modal" data-target="#addComponentModal")
                span.glyphicon.glyphicon-plus

          #idea-summary-aptitudes.aptitudeList
            .profileAptitudes
              if aptitudes && aptitudes.length > 0
                h4 Aptitudes
                ul
                  each aptitude in aptitudes
                    li(data-apt-id="#{aptitude.identifier}") 
                      a(href="/aptitudes/" + aptitude.title) #{aptitude.title}
              if inventorName == user.username
                if !aptitudes || aptitudes.length == 0
                  h4 Aptitudes
                form(role='form', id="saveAptitude" action="/save-aptitude", method="post", style='max-width: 300px;', data-idea-doc=idea)
                  .form-group
                    |  
                    input(type="hidden", name="_csrf", value="#{csrfToken}")
                    input.form-control.ui-front(type='text', id="aptitudeTitle", name="aptitudeTitle", placeholder='New Aptitude..', autocomplete="on")
                  .modal-footer
                    button.btn.btn-success#aptitudeSubmit(type='submit') Save


      .idea-function-column.col-md-8
        button(type="button" id="emailShareButton" class="btn secondary-btn btn-default pull-right clearfix" data-toggle="modal" data-target="#shareModal")
          span.glyphicon.glyphicon-envelope   

        if inventorName == user.username
          .row.patent-strength-row
            h4 Is #{idea.name} ready to file?
              a#whats-left-link(data-toggle="modal" data-target="#whatsLeftModal")  What's Left?

            .app-strength-bar.col-md-8
              .app-strength(class="#{appStrengthClass}") #{appStrengthText}
            .col-md-4
              a.btn.btn-default#file-patent(data-toggle="modal" data-target="#filePatentModal") File My Patent

        .row
          .idea-summary-data#idea-summary-problems
            h4#imperfections-header Imperfections
            ul.idea-summary-problem-list
              each problem, index in problems
                if(index < 3 && problem.text && problem['identifier'])
                  li.row
                    div.col-xs-12
                      include ../partials/problem-summary-element.jade

            button(type="button" id="problemModalButton"  class="btn btn-default" data-toggle="modal" data-target="#addProblemModal") Add a Problem
            |  
            button(type="button"  class="btn btn-default" data-toggle="modal" data-target="#viewAllImperfections") View All

        .idea-summary-data#idea-summary-waste-values
          h4 Idea Viability Scores
          a.btn.btn-default( type="button" id="viabilityModalButton"  class="btn btn-default" data-toggle="modal" data-target="#viabilityModal") Score Now
          br

  #titleModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Name Your Idea
        .modal-body
          form(role='form', id="saveIdeaName" action="/save-idea-name", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input(type="hidden", name="_csrf", value="#{csrfToken}")
              input.form-control(type="text", name="inventionName", value='My idea is named ')
              p (ex. "Flux Capacitor")
              p.charactersRemaining
            .modal-footer
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#submit(type='submit') Save

  #viewAllImperfections.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 All Imperfections
        .modal-body
          .row 
            .idea-summary-data#idea-summary-problems
              ul.idea-summary-problem-list
                each problem, index in problems
                  if(problem.text && problem['identifier'])
                    li.row
                      div.col-xs-12
                        include ../partials/problem-summary-element.jade

              button(type="button" id="problemModalButton"  class="btn btn-default" data-toggle="modal" data-target="#addProblemModal") Add a Problem
        .modal-footer
          button.btn.btn-info(data-dismiss="modal") Ok

  #viewAllComponents.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 All Components
        .modal-body
          .row 
            .col-xs-9
              if components
                ul
                  each component,index in components
                    if component['text']
                      if component['identifier']
                        li 
                          a(href="/component-profile/"+component['identifier'])
                            h4 #{component['number']} : #{component['text']}
                      else
                        li 
                          h4 #{component['number']} : #{component['text']}
                    else if component['descriptions'].length > 0 && index < 5
                      if component['identifier']
                        li
                          a(href="/component-profile/"+component['identifier'])
                            h4 #{component['descriptions'][0]}
                      else
                        li
                          h4 #{component['descriptions'][0]}
        .modal-footer
          button.btn.btn-info(data-dismiss="modal") Ok

  #whatsLeftModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Enter More Information
        .modal-body
          ul
            each object, key in strengthResponse
              case key
                when "description"
                  if object == ""
                    li Add a brief Description of your idea
                      a.whats-left-button.btn.btn-default( href="/accomplish" ) Go
                when "problem"
                  if object == ""
                    li Add a Problem your idea is addressing
                      a.whats-left-button.btn.btn-default( href="/introduce-idea" ) Go
                when "name"
                  if object == ""
                    li Give your idea a name
                      a.whats-left-button.btn.btn-default#openTitleModal() Go
                when "images"
                  if object.length < 2
                    li Upload more images
                      a.whats-left-button.btn.btn-default( href="/image-upload" ) Go
                when "issues"
                  if object.length < 4
                    li Enter more issues with your idea
                      a.whats-left-button.btn.btn-default#openAddProblemModal() Go
                when "viabilityScores"
                  if appStrengthText == "NOT YET..." && object.length < 4
                    li Enter more viability scores
                      a.whats-left-button.btn.btn-default#openViabilityModal() Go
                  else if appStrengthText == "ALMOST..." && object.length < 15
                    li Enter more viability scores
                      a.whats-left-button.btn.btn-default#openViabilityModal() Go
                when "imagesWithAnnotations"
                  if object.length < strengthResponse['images'].length 
                    li Add at least one annotation to every image
                      a.whats-left-button.btn.btn-default( href="/image-upload" ) Go
                when "problemsWithSuggestions"
                  if object.length < strengthResponse['issues'].length
                    li Add at least one suggestion per issue
                      a.whats-left-button.btn.btn-default( href="/suggestion-summary" ) Go
                when "compsWithRelationships"
                  if object.length < strengthResponse['allComponents'].length
                    li Add at least one relationship per component
                      a.whats-left-button.btn.btn-default#viewComponentsTab() Go
        .modal-footer
          button.btn.btn-success(data-dismiss="modal") Ok


  #viabilityModal.modal.fade(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Idea Viability Scores
        .modal-body
          .view-all-viabilities
              include ../partials/viability-overview-modal.jade
          .view-specific-viability
        .modal-footer.view-all-button
            button.btn.btn-info.modal-expand-collapse Expand
            button.btn.btn-info.modal-view-all View All
            button.btn.btn-info.cancel-button(data-dismiss="modal") Cancel
            button.btn.btn-success#viabilitySubmit(data-viability-category="view-all") Submit

  #addProblemModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h4 Record a New Imperfection
        .modal-body
          form(role='form', id="addIdeaProblem" action="/add-idea-problem", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input(type="hidden", name="_csrf", value="#{csrfToken}")
              input#problemStatement.form-control(type="text", name="problemStatement", value='The problem is ')
              p (ex. "It draws too much power")
              p.charactersRemaining
              h4 Imperfection Area:
              select.form-control#problemArea
                  option(value="None Selected") None Selected
                  each value in problemAreas
                    option(value=value) #{value}

            .modal-footer
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#problemSubmit(type='submit') Save
  #addComponentModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Record a New Component
        .modal-body
          form(role='form', id="addIdeaComponent" action="/add-idea-component", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input#componentName.form-control(type="text", name="componentName", value='The component is called ')
              input(type="hidden", name="_csrf", value="#{csrfToken}")
              p (ex. "The Start Button")
              p.compNameCharRemaining
              input#componentDescription.form-control(type="text", name="componentDescription", value='The way it works is ')
              p (ex. "it initiates the sequence automatically")
              p.compDescrCharRemaining
          form(role='form', id="formImageUpload" action="/add-component-image", method="post", data-idea-doc=idea, enctype="multipart/form-data")
            .form-group
              h4 Component Image
              |  
              input#fileInput(type="file", name="picture")
              input(type="hidden" id="image-component" name="imageComponent")
              input(type="hidden" id="component-idea-name" name="componentIdeaName" value="#{idea.name}")
              input(type="hidden", name="_csrf", value="#{csrfToken}")
            .modal-footer
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#componentSubmit(type='submit') Save

  #filePatentModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 File a Patent Application
        .modal-body
          if appStrengthClass == "yes col-md-12"
            a.btn.btn-default#create-application-button( href="/create-application" ) Download Application
            br
            if !receipt
              form(role='form', id="prelimReceiptUpload" action="/reciept-upload", method="post", data-idea-doc=idea, enctype="multipart/form-data")
                .form-group
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                  input#receiptInput(type="file", name="receipt")
            else
              a(href=receipt.amazonURL download)
                p Receipt uploaded.
              h4 Variants
              each variantDate in variantDates
                .row
                  a(href="/ideas/#{idea.name}/variant/"+variantDate[1]) #{variantDate[0]}

              a.btn.btn-default( href="/view-idea-suggestions" ) Create a New Variant
              br
          else if appStrengthClass.indexOf("almost") > -1 || appStrengthClass.indexOf("not-yet") > -1
            h4 Enter more information before generating an application.
          br

          .modal-footer
            button.btn.btn-info(data-dismiss="modal") Cancel


  button(type="button" id="titleModalButton" style="display:none;" class="btn btn-primary" data-toggle="modal" data-target="#titleModal") Go Win Fight

  #shareModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Share Your Idea
        .modal-body
          form(role='form', id="shareForm" action="/share-idea", method="post", style='max-width: 300px;')
            .form-group
              input#toEmailAddress.form-control(type="email", name="toEmailAddress" placeholder="To:" required)
              input#fromEmailAddress.form-control(type="email", name="fromEmailAddress" placeholder="From:" required)
              input#emailSubject.form-control(type="text", name="emailSubject" placeholder="Subject:" required)
              textarea#emailBody.form-control(type="text", name="emailBody" placeholder="Body: (Include a link here!)" required)
              input(type="hidden", name="_csrf", value="#{csrfToken}")
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#emailSend(type='submit') Send

  button(type="button" id="titleModalButton" style="display:none;" class="btn btn-primary" data-toggle="modal" data-target="#titleModal") Go Win Fight

  include ../partials/js-includes.jade
  script(type="text/javascript").
    
    function initializeAllSliders(idea){
      var labelArr = _.range(101).map(function(number){
        return number.toString();
      });
      var initialValue, min=1, max=100, valueEntered = false;
      var viabilitySliders = [
        "#perf",
        "#afford",
        "#feature",
        "#deliver",
        "#useability",
        "#maintain",
        "#danger",
        "#durability",
        "#image",
        "#complex",
        "#precision",
        "#variability",
        "#sensitivity",
        "#immature",
        "#skills"
      ]

      
      for(var i = 0; i < viabilitySliders.length; i++){      
        valueEntered = false;
        switch (viabilitySliders[i]){
          case "#perf" : 
            initialValue = idea.performOne || 50;
            if(idea.performOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#afford" : 
            initialValue = idea.affordOne || 50;
            if(idea.affordOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#feature" : 
            initialValue = idea.featureOne || 50;
            if(idea.featureOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#deliver" : 
            initialValue = idea.deliverOne || 50;
            if(idea.deliverOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#useability" : 
            initialValue = idea.useabilityOne || 50;
            if(idea.useabilityOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#maintain" : 
            initialValue = idea.maintainOne || 50;
            if(idea.maintainOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#danger" : 
            initialValue = idea.dangerOne || 50;
            if(idea.dangerOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#durability" : 
            initialValue = idea.durabilityOne || 50;
            if(idea.durabilityOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#image" : 
            initialValue = idea.imageOne || 50;
            if(idea.imageOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#complex" : 
            initialValue = idea.complexOne || 50;
            if(idea.complexOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#precision" : 
            initialValue = idea.precisionOne || 50;
            if(idea.precisionOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#variability" : 
            initialValue = idea.variabilityOne || 50;
            if(idea.variabilityOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#sensitivity" : 
            initialValue = idea.sensitivityOne || 50;
            if(idea.sensitivityOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#immature" : 
            initialValue = idea.immatureOne || 50;
            if(idea.immatureOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
          case "#skills" : 
            initialValue = idea.skillsOne || 50;
            if(idea.skillsOne){
              valueEntered = true;
            } else { valueEntered = false; }
            break;
        }

        ////////////////////////////////////////////
        // SET UP SLIDER ONE
        ////////////////////////////////////////////
        
        $(viabilitySliders[i]+ "Slider").slider({
          value:initialValue,
          min: min,
          orientation : "horizontal",
          range : "min",
          max: max,
          step: 1,
          slide: function( event, ui ) {
              valueEntered = true;
              $(this).addClass("value-entered");
          }
        });

        if(valueEntered){
          $(viabilitySliders[i]+ "Slider").addClass("value-entered");
        }

      }

      //kind of a hack because I couldnt get the previous click event handlers
      // to detach from the submit button between viability categories
      // as the user went through more than one in a row. I tried the jquery unbind and off
      // functions
      $("#viabilitySubmit").remove();
      $("<button class='btn btn-success' id='viabilitySubmit'>Submit</button>")
      .appendTo("#viabilityModal .modal-footer.view-all-button")
      .click(function(event){

        var data = {_csrf : $('[name="_csrf"]').val()};
        $(".ui-slider").each(function(index, element){
          switch ($(this).attr("id")){
            case "perfSlider" : 
              if($(element).hasClass("value-entered")){
                data["performOne"] = $(element).slider("value");
              }
              break;
            case "affordSlider" : 
              if($(element).hasClass("value-entered")){
                data["affordOne"] = $(element).slider("value");
              }
              break;
            case "featureSlider" : 
              if($(element).hasClass("value-entered")){
                data["featureOne"] = $(element).slider("value");
              }
              break;
            case "deliverSlider" : 
              if($(element).hasClass("value-entered")){
                data["deliverOne"] = $(element).slider("value");
              }
              break;
            case "useabilitySlider" : 
              if($(element).hasClass("value-entered")){
                data["useabilityOne"] = $(element).slider("value");
              }
              break;
            case "maintainSlider" : 
              if($(element).hasClass("value-entered")){
                data["maintainOne"] = $(element).slider("value");
              }
              break;
            case "dangerSlider" : 
              if($(element).hasClass("value-entered")){
                data["dangerOne"] = $(element).slider("value");
              }
              break;
            case "durabilitySlider" : 
              if($(element).hasClass("value-entered")){
                data["durabilityOne"] = $(element).slider("value");
              }
              break;
            case "imageSlider" : 
              if($(element).hasClass("value-entered")){
                data["imageOne"] = $(element).slider("value");
              }
              break;
            case "complexSlider" : 
              if($(element).hasClass("value-entered")){
                data["complexOne"] = $(element).slider("value");
              }
              break;
            case "precisionSlider" : 
              if($(element).hasClass("value-entered")){
                data["precisionOne"] = $(element).slider("value");
              }
              break;
            case "variabilitySlider" : 
              if($(element).hasClass("value-entered")){
                data["variabilityOne"] = $(element).slider("value");
              }
              break;
            case "sensitivitySlider" : 
              if($(element).hasClass("value-entered")){
                data["sensitivityOne"] = $(element).slider("value");
              }
              break;
            case "immatureSlider" : 
              if($(element).hasClass("value-entered")){
                data["immatureOne"] = $(element).slider("value");
              }
              break;
            case "skillsSlider" : 
              if($(element).hasClass("value-entered")){
                data["skillsOne"] = $(element).slider("value");
              }
              break;
          }
        });
        $.post('/update-all-viabilities', data, function(returnData, status){
          if(status=="success"){
            window.location.reload(true);
          }
        });
      });

    } // end of initialize all sliders function

    //actually invoke this method. it will be used later when some one hits the 
    // view all button
    //initializeAllSliders('#{idea}');

    function getNextSliderConfig(categoryName, valueEntered, value){
        switch (categoryName) {
          case "performability" :
            var initialValue =  value || 50;
            
            initiateSlider("perfSliderOne", "perfLabelOne",
              "formPerformability", initialValue, "performability",
              "performProblem", "affordability", valueEntered)
            break;

          case "affordability" :
            var initialValue = value || 50;

            initiateSlider("affordSliderOne", "affordLabelOne",
              "formAffordability", initialValue, "affordability",
              "affordProblem", "featurability", valueEntered)
            break;
          case "featurability" :
            var initialValue = value || 50;

            initiateSlider("featureSliderOne", "featureLabelOne",
              "formFeaturability", initialValue, "featurability",
              "featureProblem", "deliverability", valueEntered)
            break;
          case "deliverability" :
            var initialValue = value || 50;

            initiateSlider("deliverSliderOne", "deliverLabelOne",
              "formDeliverability", initialValue, "deliverability",
              "deliverProblem", "useability", valueEntered)
            break;
          case "useability" : 
            var initialValue = value || 50;

            initiateSlider("useabilitySliderOne", "useabilityLabelOne",
              "formUseability", initialValue, "useability",
              "useabilityProblem", "maintainability", valueEntered)
            break;
          case "maintainability" : 
            var initialValue = value || 50;

            initiateSlider("maintainabilitySliderOne", "maintainabilityLabelOne",
              "formMaintainability", initialValue, "maintainability",
              "maintainProblem", "durability", valueEntered)
            break;
          case "durability" : 
            var initialValue = value || 50;

            initiateSlider("durabilitySliderOne", "durabilityLabelOne",
              "formDurability", initialValue, "durability",
              "durabilityProblem", "imageability", valueEntered)
            break;
          case "imageability" : 
            var initialValue = value || 50;

            initiateSlider("imageabilitySliderOne", "imageabilityLabelOne",
              "formImageability", initialValue, "imageability",
              "imageProblem", "complexity", valueEntered)
            break;
          case "complexity" : 
            var initialValue = value || 50;

            initiateSlider("complexitySliderOne", "complexityLabelOne",
              "formComplexity", initialValue, "complexity",
              "complexProblem", "precision", valueEntered)
            break;
          case "precision" : 
            var initialValue = value || 50;

            initiateSlider("precisionSliderOne", "precisionLabelOne",
              "formPrecision", initialValue, "precision",
              "precisionProblem", "variability", valueEntered)
            break;
          case "variability" : 
            var initialValue = value || 50;

            initiateSlider("variabilitySliderOne", "variabilityLabelOne",
              "formVariability", initialValue, "variability",
              "variabilityProblem", "sensitivity", valueEntered)
            break;
          case "sensitivity" : 
            var initialValue = value || 50;

            initiateSlider("sensitivitySliderOne", "sensitivityLabelOne",
              "formSensitivity", initialValue, "sensitivity",
              "sensitivityProblem", "immaturity", valueEntered)
            break;
          case "immaturity" : 
            var initialValue = value || 50;

            initiateSlider("immaturitySliderOne", "immaturityLabelOne",
              "formImmaturity", initialValue, "immaturity",
              "immatureProblem", "dangerous", valueEntered)
            break;
          case "dangerous" : 
            var initialValue = value || 50;

            initiateSlider("dangerousSliderOne", "dangerousLabelOne",
              "formDangerous", initialValue, "dangerous",
              "dangerProblem", "skills", valueEntered)
            break;
          case "skills" : 
            var initialValue = value || 50;

            initiateSlider("skillsSliderOne", "skillsLabelOne",
              "formSkills", initialValue, "skills",
              "skillsProblem", "view-all")
            break;
        }

    }

    function initiateSlider(sliderName, labelName, formName, initialValue, postPath, problemName, nextCategory, valueEntered){
      var labelArr = _.range(101).map(function(number){
        return number.toString();
      });
      var min=1, max=100, uiValue;
      

      $("#"+ sliderName).slider({
        value:initialValue,
        orientation : "horizontal",
        range : "min",
        min: min,
        max: max,
        step: 1,
        slide: function( event, ui ) {
            valueEntered = true;
            uiValue = ui.value;
            $(this).addClass("value-entered");
            $("#" + labelName).text(labelArr[ui.value]);
            $("#" + labelName).css("margin-left", (ui.value-min)/(max-min)*100+"%");
            $("#" + labelName).css("left", "-50px");
        }
      });
      if(valueEntered){
        $("#"+ sliderName).addClass("value-entered");
      }
      $("#" + labelName).text(labelArr[initialValue]);
      $("#" + labelName ).css("margin-left", (initialValue -1)/(max-min)*100+"%");
      $("#" + labelName).css("left", "-50px");

      
      //kind of a hack because I couldnt get the previous click event handlers
      // to detach from the submit button between viability categories
      // as the user went through more than one in a row. I tried the jquery unbind and off
      // functions
      $("#viabilitySubmit").remove();
      $("<button class='btn btn-success' id='viabilitySubmit'>Save</button>")
      .appendTo("#viabilityModal .modal-footer.view-all-button")
      .click(function(event){
        var data = {_csrf : $('[name="_csrf"]').val()};
        if(valueEntered){
          data[sliderName+"Value"] = uiValue;
          
        } 
        if($("#"+formName + " textarea").val() != "The problem of "){
          data[problemName] = $("#"+formName + " textarea").val();
        }
        $.post('/' + postPath, data, function(returnData, status){
          //dont do anything with this return data, because we need to get the modal version
          // of the nextCategory page
          
          if(nextCategory == "view-all"){
            window.location.reload(true);
          } else {
            $.get("/" + nextCategory, {isModal : true}, function(returnData, status){
              $("#viabilityModal .modal-body .view-specific-viability").html("")
              $("#viabilityModal .modal-body .view-specific-viability").html(returnData);
              $("#viabilityModal .modal-title h2").text(nextCategory.charAt(0).toUpperCase() + nextCategory.slice(1));
              $.get('/get-all-viability-scores', function(sliderData, status){
                var sliderVal;
                //get the correct value out of sliderData
                $("#viabilityModal .modal-title img").remove();

                switch(nextCategory) {
                case "performability" : 
                  sliderVal = sliderData['performOne'];
                  $("<img src='/perfIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "affordability" : 
                  sliderVal = sliderData['affordOne'];
                  $("<img src='/affordIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "featurability" : 
                  sliderVal = sliderData['featureOne'];
                  $("<img src='/perfIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "deliverability" : 
                  sliderVal = sliderData['deliverOne'];
                  $("<img src='/deliverabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "useability" : 
                  sliderVal = sliderData['useabilityOne'];
                  $("<img src='/perfIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "maintainability" : 
                  sliderVal = sliderData['maintainOne'];
                  $("<img src='/maintainabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "durability" : 
                  sliderVal = sliderData['durabilityOne'];
                  $("<img src='/durabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "imageability" : 
                  sliderVal = sliderData['imageOne'];
                  $("<img src='/imageabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "complexity" : 
                  sliderVal = sliderData['complexOne'];
                  $("<img src='/complexityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "precision" : 
                  sliderVal = sliderData['precisionOne'];
                  $("<img src='/precisionIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "variability" : 
                  sliderVal = sliderData['variabilityOne'];
                  $("<img src='/variabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "sensitivity" : 
                  sliderVal = sliderData['sensitivityOne'];
                  $("<img src='/sensitivityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "immaturity" : 
                  sliderVal = sliderData['immatureOne'];
                  $("<img src='/immaturityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "dangerous" : 
                  sliderVal = sliderData['dangerOne'];
                  $("<img src='/dangerIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                case "skills" : 
                  sliderVal = sliderData['skillsOne'];
                  $("<img src='/skillsIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
                  break;
                }
                if(sliderVal){
                  valueEntered = true;
                } else {
                  valueEntered = false;
                  sliderVal = 50;
                }
                getNextSliderConfig(nextCategory, valueEntered, sliderVal);
              });
            });
          }
        });

      });
    }

    $(".viabilityLink").click(function(event){
      var data = {
        "isModal" : true
      };
      var pathname = $(this)[0].getAttribute("href");
      var valueEntered = false;
      $("button.btn.btn-info.modal-expand-collapse").hide();        
      $("button.btn.btn-info.modal-view-all").show();

      $.get(pathname, data, function(returnData, status){
        $("#viabilityModal .view-all-viabilities").hide();
        //$("#viabilitySubmit").attr("data-viability-category", pathname.slice(1));
        $("#viabilityModal .modal-body .view-specific-viability").html(returnData);
        $("#viabilityModal .modal-title h2").text(pathname.slice(1).charAt(0).toUpperCase() + pathname.slice(1).slice(1));
        $.get('/get-all-viability-scores', function(sliderData, status){
          //get the correct value out of sliderData
          $("#viabilityModal .modal-title img").remove();
          switch(pathname.slice(1)) {
          case "performability" : 
            sliderVal = sliderData['performOne'];
            $("<img src='/perfIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "affordability" : 
            sliderVal = sliderData['affordOne'];
            $("<img src='/affordIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "featurability" : 
            sliderVal = sliderData['featureOne'];
            $("<img src='/perfIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "deliverability" : 
            sliderVal = sliderData['deliverOne'];
            $("<img src='/deliverabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "useability" : 
            sliderVal = sliderData['useabilityOne'];
            $("<img src='/perfIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "maintainability" : 
            sliderVal = sliderData['maintainOne'];
            $("<img src='/maintainabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "durability" : 
            sliderVal = sliderData['durabilityOne'];
            $("<img src='/durabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "imageability" : 
            sliderVal = sliderData['imageOne'];
            $("<img src='/imageabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "complexity" : 
            sliderVal = sliderData['complexOne'];
            $("<img src='/complexityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "precision" : 
            sliderVal = sliderData['precisionOne'];
            $("<img src='/precisionIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "variability" : 
            sliderVal = sliderData['variabilityOne'];
            $("<img src='/variabilityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "sensitivity" : 
            sliderVal = sliderData['sensitivityOne'];
            $("<img src='/sensitivityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "immaturity" : 
            sliderVal = sliderData['immatureOne'];
            $("<img src='/immaturityIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "dangerous" : 
            sliderVal = sliderData['dangerOne'];
            $("<img src='/dangerIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          case "skills" : 
            sliderVal = sliderData['skillsOne'];
            $("<img src='/skillsIcon.png' class='viabilityIcon'>").insertBefore("#viabilityModal .modal-title h2");
            break;
          }
          if(sliderVal){
            valueEntered = true;
          }
          getNextSliderConfig(pathname.slice(1), valueEntered, sliderVal);
        });

      });
    });

    $("#viabilityModal .modal-expand-collapse").click(function(eventView){
      //if view all viabilities is not visible, remove contents and show 
      // the view-all view
      if($(".additional-viabilities").is(":visible")){
        $(".additional-viabilities").hide();
        $("button.btn.btn-info.modal-expand-collapse").text("Expand")
      } else {
        $(".additional-viabilities").show();
        $("button.btn.btn-info.modal-expand-collapse").text("Collapse")
      }
    });

    $("#viabilityModal .modal-view-all").click(function(eventView){
      //if view all viabilities is not visible, remove contents and show 
      // the view-all view
      if(!$(".view-all-viabilities").is(":visible")){
        $("button.btn.btn-info.modal-expand-collapse").show();        
        $("button.btn.btn-info.modal-view-all").hide();       
        $("#viabilityModal .modal-body .view-specific-viability").html("")
        //$("#viabilitySubmit").attr("data-viability-category", "view-all");
        $("#viabilityModal .view-all-viabilities").show();
        $("#viabilityModal .modal-title h2").text("Idea Viability Scores");
        
        $.get('/get-all-viability-scores', function(returnData, status){
          $("#perfSlider").slider("destroy");
          $("#affordSlider").slider("destroy");
          $("#featureSlider").slider("destroy");
          $("#deliverSlider").slider("destroy");
          $("#useabilitySlider").slider("destroy");
          $("#maintainSlider").slider("destroy");
          $("#dangerSlider").slider("destroy");
          $("#durabilitySlider").slider("destroy");
          $("#imageSlider").slider("destroy");
          $("#complexSlider").slider("destroy");
          $("#precisionSlider").slider("destroy");
          $("#variabilitySlider").slider("destroy");
          $("#sensitivitySlider").slider("destroy");
          $("#immatureSlider").slider("destroy");
          $("#skillsSlider").slider("destroy");
          $(".view-all-viabilities .ui-slider").html("");
          initializeAllSliders(returnData);   
        });
      }
    });

    $(window).load(function(){
        if("!{idea.name}" == ""){
          $('#titleModal').modal('show');
        }
        if("!{idea.description}" == ""){
          $("#idea-summary-accomplish")
            .addClass("incomplete-data");
          $("#idea-summary-accomplish a")
            .before("<h4><i>No data entered</i></h4>");
        }
        if("!{idea.problem}" == ""){
          $("#idea-summary-challenge")
            .addClass("incomplete-data");
          $("#idea-summary-challenge a")
            .before("<h4><i>No data entered</i></h4>");
        }

        $("#openTitleModal").click(function(event){
          $("#whatsLeftModal").modal('hide');
          $('#titleModal').modal('show');
        })

        $("#openAddProblemModal").click(function(event){
          $("#whatsLeftModal").modal('hide');
          $('#addProblemModal').modal('show');
        })

        $("#openViabilityModal").click(function(event){
          $("#whatsLeftModal").modal('hide');
          $('#viabilityModalButton').click();
        })

        $("#viewComponentsTab").click(function(event){
          $("#whatsLeftModal").modal('hide');
          $('a').filter(function(index) { return $(this).text() === "Components"; }).click();
        })

    });

    $("#viabilityModalButton").click(function(event){
      $.get('/get-all-viability-scores', function(returnData, status){
        $(".view-all-viabilities .ui-slider").html("");
        initializeAllSliders(returnData);
        if(status != "success"){
          alert("review not created correctly");
        }
      });
    });

    $("#viabilityModal .cancel-button").click(function(event){
        $("#perfSlider").slider("destroy");
        $("#affordSlider").slider("destroy");
        $("#featureSlider").slider("destroy");
        $("#deliverSlider").slider("destroy");
        $("#useabilitySlider").slider("destroy");
        $("#maintainSlider").slider("destroy");
        $("#dangerSlider").slider("destroy");
        $("#durabilitySlider").slider("destroy");
        $("#imageSlider").slider("destroy");
        $("#complexSlider").slider("destroy");
        $("#precisionSlider").slider("destroy");
        $("#variabilitySlider").slider("destroy");
        $("#sensitivitySlider").slider("destroy");
        $("#immatureSlider").slider("destroy");
        $("#skillsSlider").slider("destroy");
    });

    $("#componentsHeader").click(function(event){
      $('#viewAllComponents').modal('show');
    })

    $("#imperfections-header").click(function(event){
      $('#viewAllImperfections').modal('show');
    })

    $("#problemSubmit").click(function(event){
      event.preventDefault();
      $.post('/add-idea-problem', 
        {
          _csrf : $('[name="_csrf"]').val(),
          problemStatement : $("#problemStatement").val().slice(15),
          problemArea : $("#problemArea option:selected").text(),
        },
        function(resp) {
          window.location.reload(true);
        });      
    });

    $("#componentSubmit").click(function(event){
      event.preventDefault();


      $.post('/add-idea-component', 
        {
          _csrf : $('[name="_csrf"]').val(),
          componentName : $("#componentName").val().slice(24),
          componentDescription : $("#componentDescription").val().slice(20)
        },
        function(data, response) {
          if(document.getElementById("fileInput").files.length != 0){
            $("#image-component").val( data['identifier'] );
            // This doesnt work for some reason....
            document.getElementById("formImageUpload").submit();
          }
          $("#idea-summary-components ul")
            .append("<li><a href='/component-profile/"+ data['identifier'] +"'><h4>"+ data['number'] + " : " + data['text'] + "</h4></a></li>");
          $("#componentName").val('');
          $("#componentDescription").val('');
          $("#addComponentModal").modal('hide');
          //window.location.reload(true);
        });      
    });

    // This is for the idea name
    var inputName = $("#saveIdeaName input")[0];
    var requiredNameText = "My idea is named "
    $("#saveIdeaName .charactersRemaining").text((30) + " characters remaining");
    inputName.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1) {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
    }, false);

    inputName.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1) {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
      $("#saveIdeaName input").keyup(function(){
        $("#saveIdeaName .charactersRemaining").text((30 + requiredNameText.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the problem input
    var inputProb = $("#addIdeaProblem input")[0];
    var requiredProbText = "The problem is "
    $("#addIdeaProblem .charactersRemaining").text((200) + " characters remaining");
    inputProb.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredProbText) == -1) {
            $(this).val(requiredProbText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
    }, false);

    inputProb.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredProbText) == -1) {
            $(this).val(requiredProbText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
      $("#addIdeaProblem input").keyup(function(){
        $("#addIdeaProblem .charactersRemaining").text((200 + requiredProbText.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the first text input field in the add component modal
    var inputOne = $("#addIdeaComponent input#componentName")[0];
    var requiredCompTextOne = "The component is called "
    $("#addIdeaComponent .compNameCharRemaining").text((200) + " characters remaining");
    inputOne.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1) {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < 24) {
        this.selectionStart = 24;
      }
    }, false);

    inputOne.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1) {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < 24) {
        this.selectionStart = 24;
      }
      $("#addIdeaComponent input#componentName").keyup(function(){
        $("#addIdeaComponent .compNameCharRemaining").text((200 + requiredCompTextOne.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the second text input field in the add component modal
    var inputTwo = $("#addIdeaComponent input#componentDescription")[0];
    var requiredCompTextTwo = "The way it works is "
    $("#addIdeaComponent .compDescrCharRemaining").text((200) + " characters remaining");
    inputTwo.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
    }, false);

    inputTwo.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
      $("#addIdeaComponent input#componentDescription").keyup(function(){
        $("#addIdeaComponent .compDescrCharRemaining").text((200 + requiredCompTextTwo.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    $("#aptitudeSubmit").click(function(event){
      event.preventDefault();
      if($("#aptitudeTitle").val() != ""){
        $.post('/save-aptitude', 
          {
            _csrf : $('[name="_csrf"]').val(),
            ideaName : "!{idea.name}",
            aptitudeTitle : $("#aptitudeTitle").val()
          },
          function(resp) {
            window.location.reload(true);
          });
      } else {
        alert("Please enter a valid aptitude.");
      }
    });

    
    document.getElementById("receiptInput").onchange = function(event) {
      const files = document.getElementById('receiptInput').files;
      const file = files[0];
      const csrf = $("input[name='_csrf']").val();
      if(file == null){
        return alert('No file selected.');
      }
      var fr   = new FileReader;
      
      fr.onloadend = function() {
        if(file.size < 3000000){
          getSignedRequest(file, csrf);
        } else if (file.size > 3000000){
          alert('Please choose an image smaller than 3 MB.')
        } else {
          alert('An error ocurred with this image.')
        }

      };

      fr.readAsArrayBuffer(file); // read the file


    };

    function uploadFile(file, signedRequest, url, csrf){
      const xhr = new XMLHttpRequest();
      xhr.open('PUT', signedRequest);
      xhr.onreadystatechange = function() {
        if(xhr.readyState === 4){
          if(xhr.status === 200 && (file.type=="application/pdf")){
            var data = {"filename" : file.name, "fileUrl" : url, "type" : file.type,
              "_csrf" : csrf };
            $.post('/receipt-upload', data , function(response, status){
              if(status == 200){
                window.location.reload();
              } else {
                alert('An error ocurred while uploading receipt.')
              }
            });
          }
          else{
            alert('Please upload PDF.');
          }
        }
      };
      xhr.send(file);
    }

    function getSignedRequest(file, csrf){
      const xhr = new XMLHttpRequest();
      xhr.open('GET', '/sign-s3?file-name='+file.name + '&file-type='+ file.type);
      xhr.onreadystatechange = function() {
        if(xhr.readyState === 4){
          if(xhr.status === 200){
            var response;
            if(xhr.responseText == ""){
              response = JSON.parse('{}');
            } else {
              response = JSON.parse(xhr.responseText);
            }
            uploadFile(file, response.signedRequest, response.url, csrf);
          }
          else{
            alert('Could not get signed URL.');
          }
        } 
        
      };
      xhr.send();
    }

    $("#emailSend").click(function(event){
      event.preventDefault();
        $.post('/share-idea', 
          {
            _csrf : $('[name="_csrf"]').val(),
            toEmailAddress : $("#toEmailAddress").val(),
            fromEmailAddress : $("#fromEmailAddress").val(),
            emailSubject : $("#emailSubject").val(),
            emailBody : $("#emailBody").val()
          },
          function(resp) {
            window.location.reload(true);
          });
    });
