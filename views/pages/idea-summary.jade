doctype html
html
  head
    include ../partials/head.jade
  body
  .header
    span.userName Howdy #{user.username}
    |  
    .profile-headshot
      if headshot
        img.placeholder(src=headshot height="75" width="75")
        a.plus-overlay(href="/profile-picture")
          img(src='/plus-overlay.png' height="75" width="75")
      else  
        img.placeholder(src="/avatar.png" height="75" width="75")
        a.plus-overlay(href="/profile-picture")
          img(src='/plus-overlay.png' height="75" width="75")
    a.home-logout.btn.btn-default( href="/begin" ) My Profile
    | 
    a.home-logout.btn.btn-default( href="/logout" ) Log Out

  .idea-summary
    h3 Idea Summary for #{idea.name}

    .edit-column.col-md-4
      .imagesList
        if(imageURLs)
          h4 Uploaded Images
          each imageURL, index in imageURLs
            if index == 0
              .image-summary-image
                img(src=imageURL[1] height="300" width="400")
            if index < 3 && index > 0
              img.imageListItems(src=imageURL[1])
          .view-all-images-btn
            a.btn.btn-default( href="/image-upload" ) View All Images
      .idea-summary-data#idea-summary-challenge
        h4 Challenge
        p <i>#{idea.problem}</i>
        a.btn.btn-default( href="/introduce-idea" ) Edit > 
        br
      .idea-summary-data#idea-summary-accomplish
        h4 Description
        p <i>#{idea.description}</i>
        a.btn.btn-default( href="/accomplish" ) Edit >
        br

    .idea-function-column.col-md-8
      //
        Navigation tabs
      ul.nav.nav-tabs(role="tablist")
        li.active(role="presention")
          a(href="#components" aria-controls="components" role="tab" data-toggle="tab") Components
        li(role="presention")
          a(href="#issues" aria-controls="issues" role="tab" data-toggle="tab") Issues
        li(role="presention")
          a(href="#suggestions" aria-controls="suggestions" role="tab" data-toggle="tab") Suggestions
      //
        Tab content
      .tab-content
        .tab-pane.active#components(role="tabpanel")
          .idea-summary-data#idea-summary-components
            h4 Components
            if components
              ul
                each component in components
                  if component['text']            
                    if component['identifier']
                      li 
                        a(href="/component-profile/"+component['identifier'])
                          h4 #{component['number']} : #{component['text']}
                    else
                      li 
                        h4 #{component['number']} : #{component['text']}
                  else if component['descriptions'].length > 0
                    if component['identifier']
                      li
                        a(href="/component-profile/"+component['identifier'])
                          h4 #{component['descriptions'][0]}
                    else
                      li
                        h4 #{component['descriptions'][0]}


            button(type="button" id="componentModalButton"  class="btn btn-default" data-toggle="modal" data-target="#addComponentModal") Add a Component

        .tab-pane.active#issues(role="tabpanel")
          .idea-summary-data#idea-summary-problems
            h4 Idea Problems
            h5 Recent Problems
            ul.idea-summary-problem-list
              each problem, index in problems
                if(index < 3 && problem.text)
                  li
                    p #{index + 1} : #{problem.text}
            button(type="button" id="problemModalButton"  class="btn btn-default" data-toggle="modal" data-target="#addProblemModal") Add a Problem
            |  
            a.btn.btn-default( href="/sort-problems" ) Sort Existing Problems
        .tab-pane.active#suggestions(role="tabpanel")
          h4 Same as components at the moment. Soon to change.

      .idea-summary-data#idea-summary-waste-values
        h4 Idea Viability Scores
        a.btn.btn-default( type="button" id="viabilityModalButton"  class="btn btn-default" data-toggle="modal" data-target="#viabilityModal") View All
        br


.inventor-only-idea-summary
  h1 For the Inventor
  .half-column
    h4 Suggestions
    a.btn.btn-default( href="/suggestion-summary" ) Make Suggestions
    br
    br
  .half-column
    br
    h4 Application
    a.btn.btn-default( href="/create-application" ) Download Application
    br
    br
    h4 Variants 
    each variantDate in variantDates
      ul.variantDateList
        li
          a(href="/variant/"+variantDate[1]) #{variantDate[0]}
    a.btn.btn-default( href="/view-idea-suggestions" ) Create a New Variant
    br
    br

  #titleModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Name Your Idea
        .modal-body
          form(role='form', id="saveIdeaName" action="/save-idea-name", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input.form-control(type="text", name="inventionName", value='My idea is named ')
              p (ex. "Flux Capacitor")
              p.charactersRemaining
            .modal-footer
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#submit(type='submit') Save

  #viabilityModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Idea Viability Scores
        .modal-body
          .view-all-viabilities
              include ../partials/viability-overview-modal.jade
          .view-specific-viability
        .modal-footer.view-all-button
            button.btn.btn-info.modal-view-all View All
            button.btn.btn-info.cancel-button(data-dismiss="modal") Cancel
            button.btn.btn-success#viabilitySubmit(data-viability-category="view-all") Save

  #addProblemModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Record a Current Problem
        .modal-body
          form(role='form', id="addIdeaProblem" action="/add-idea-problem", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input#problemStatement.form-control(type="text", name="problemStatement", value='The problem is ')
              p (ex. "It draws too much power")
              p.charactersRemaining
              h3 Select Problem Area:
              select.form-control#problemArea
                  option(value="None Selected") None Selected
                  each value in problemAreas
                    option(value=value) #{value}

            .modal-footer
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#problemSubmit(type='submit') Save
  #addComponentModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Record a New Component
        .modal-body
          form(role='form', id="addIdeaComponent" action="/add-idea-component", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input#componentName.form-control(type="text", name="componentName", value='The component is called ')
              p (ex. "The Start Button")
              p.compNameCharRemaining
              input#componentDescription.form-control(type="text", name="componentDescription", value='The way it works is ')
              p (ex. "it initiates the sequence automatically")
              p.compDescrCharRemaining
          form(role='form', id="formImageUpload" action="/add-component-image", method="post", data-idea-doc=idea, enctype="multipart/form-data")
            .form-group
              h4 Component Image
              |  
              input#fileInput(type="file", name="picture")
              input(type="hidden" id="image-component" name="imageComponent")
            .modal-footer
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#componentSubmit(type='submit') Save

  button(type="button" id="titleModalButton" style="display:none;" class="btn btn-primary" data-toggle="modal" data-target="#titleModal") Go Win Fight


  include ../partials/js-includes.jade
  script(type="text/javascript").
    
    function initializeAllSliders(idea){
      var labelArr = _.range(101).map(function(number){
        return number.toString();
      });
      var initialValue, min=1, max=100, valueEntered = false;
      var viabilitySliders = [
        "#perf",
        "#afford",
        "#feature",
        "#deliver",
        "#useability",
        "#maintain",
        "#danger",
        "#durability",
        "#image",
        "#complex",
        "#precision",
        "#variability",
        "#sensitivity",
        "#immature",
        "#skills"
      ]

      for(var i = 0; i < viabilitySliders.length; i++){      
        switch (viabilitySliders[i]){
          case "#perf" : 
            initialValue = idea.performOne || '#{idea.performOne}' || 50;
            break;
          case "#afford" : 
            initialValue = idea.affordOne || '#{idea.affordOne}' || 50;
            break;
          case "#feature" : 
            initialValue = idea.featureOne || '#{idea.featureOne}' || 50;
            break;
          case "#deliver" : 
            initialValue = idea.deliverOne || '#{idea.deliverOne}' || 50;
            break;
          case "#useability" : 
            initialValue = idea.useabilityOne || '#{idea.useabilityOne}' || 50;
            break;
          case "#maintain" : 
            initialValue = idea.maintainOne || '#{idea.maintainOne}' || 50;
            break;
          case "#danger" : 
            initialValue = idea.dangerOne || '#{idea.dangerOne}' || 50;
            break;
          case "#durability" : 
            initialValue = idea.durabilityOne || '#{idea.durabilityOne}' || 50;
            break;
          case "#image" : 
            initialValue = idea.imageOne || '#{idea.imageOne}' || 50;
            break;
          case "#complex" : 
            initialValue = idea.complexOne || '#{idea.complexOne}' || 50;
            break;
          case "#precision" : 
            initialValue = idea.precisionOne || '#{idea.precisionOne}' || 50;
            break;
          case "#variability" : 
            initialValue = idea.variabilityOne || '#{idea.variabilityOne}' || 50;
            break;
          case "#sensitivity" : 
            initialValue = idea.sensitivityOne || '#{idea.sensitivityOne}' || 50;
            break;
          case "#immature" : 
            initialValue = idea.immatureOne || '#{idea.immatureOne}' || 50;
            break;
          case "#skills" : 
            initialValue = idea.skillsOne || '#{idea.skillsOne}' || 50;
            break;
        }

        ////////////////////////////////////////////
        // SET UP SLIDER ONE
        ////////////////////////////////////////////
        $(viabilitySliders[i]+ "Slider").slider({
          value:initialValue,
          min: min,
          max: max,
          step: 1,
          slide: function( event, ui ) {
              valueEntered = true;
          }
        });

      }

      //kind of a hack because I couldnt get the previous click event handlers
      // to detach from the submit button between viability categories
      // as the user went through more than one in a row. I tried the jquery unbind and off
      // functions
      $("#viabilitySubmit").remove();
      $("<button class='btn btn-success' id='viabilitySubmit'>Save</button>")
      .appendTo("#viabilityModal .modal-footer.view-all-button")
      .click(function(event){

        var data = {};
        $(".ui-slider").each(function(index, element){
          switch ($(this).attr("id")){
            case "perfSlider" : 
              data["performOne"] = $(element).slider("value");
              break;
            case "affordSlider" : 
              data["affordOne"] = $(element).slider("value");
              break;
            case "featureSlider" : 
              data["featureOne"] = $(element).slider("value");
              break;
            case "deliverSlider" : 
              data["deliverOne"] = $(element).slider("value");
              break;
            case "useabilitySlider" : 
              data["useabilityOne"] = $(element).slider("value");
              break;
            case "maintainSlider" : 
              data["maintainOne"] = $(element).slider("value");
              break;
            case "dangerSlider" : 
              data["dangerOne"] = $(element).slider("value");
              break;
            case "durabilitySlider" : 
              data["durabilityOne"] = $(element).slider("value");
              break;
            case "imageSlider" : 
              data["imageOne"] = $(element).slider("value");
              break;
            case "complexSlider" : 
              data["complexOne"] = $(element).slider("value");
              break;
            case "precisionSlider" : 
              data["precisionOne"] = $(element).slider("value");
              break;
            case "variabilitySlider" : 
              data["variabilityOne"] = $(element).slider("value");
              break;
            case "sensitivitySlider" : 
              data["sensitivityOne"] = $(element).slider("value");
              break;
            case "immatureSlider" : 
              data["immatureOne"] = $(element).slider("value");
              break;
            case "skillsSlider" : 
              data["skillsOne"] = $(element).slider("value");
              break;
          }
        });
        $.post('/update-all-viabilities', data, function(returnData, status){
          if(status=="success"){
            window.location.reload(true);
          }
        });
      });

    } // end of initialize all sliders function

    //actually invoke this method. it will be used later when some one hits the 
    // view all button
    initializeAllSliders('#{idea}');

    function getNextSliderConfig(categoryName){
        switch (categoryName) {
          case "view-all":
            break;
          case "performability" : 
            var initialValue = '#{idea.performOne}' || 50;

            initiateSlider("perfSliderOne", "perfLabelOne",
              "formPerformability", initialValue, "performability",
              "performProblem", "affordability")
            break;

          case "affordability" : 
            var initialValue = '#{idea.affordOne}' || 50;

            initiateSlider("affordSliderOne", "affordLabelOne",
              "formAffordability", initialValue, "affordability",
              "affordProblem", "featurability")
            break;
          case "featurability" : 
            var initialValue = '#{idea.featureOne}' || 50;

            initiateSlider("featureSliderOne", "featureLabelOne",
              "formFeaturability", initialValue, "featurability",
              "featureProblem", "deliverability")
            break;
          case "deliverability" : 
            var initialValue = '#{idea.deliverOne}' || 50;

            initiateSlider("deliverSliderOne", "deliverLabelOne",
              "formDeliverability", initialValue, "deliverability",
              "deliverProblem", "useability")
            break;
          case "useability" : 
            var initialValue = '#{idea.useabilityOne}' || 50;

            initiateSlider("useabilitySliderOne", "useabilityLabelOne",
              "formUseability", initialValue, "useability",
              "useabilityProblem", "maintainability")
            break;
          case "maintainability" : 
            var initialValue = '#{idea.maintainOne}' || 50;

            initiateSlider("maintainabilitySliderOne", "maintainabilityLabelOne",
              "formMaintainability", initialValue, "maintainability",
              "maintainProblem", "durability")
            break;
          case "durability" : 
            var initialValue = '#{idea.durabilityOne}' || 50;

            initiateSlider("durabilitySliderOne", "durabilityLabelOne",
              "formDurability", initialValue, "durability",
              "durabilityProblem", "imageability")
            break;
          case "imageability" : 
            var initialValue = '#{idea.durabilityOne}' || 50;

            initiateSlider("imageabilitySliderOne", "imageabilityLabelOne",
              "formImageability", initialValue, "imageability",
              "imageProblem", "complexity")
            break;
          case "complexity" : 
            var initialValue = '#{idea.complexOne}' || 50;

            initiateSlider("complexitySliderOne", "complexityLabelOne",
              "formComplexity", initialValue, "complexity",
              "complexProblem", "precision")
            break;
          case "precision" : 
            var initialValue = '#{idea.precisionOne}' || 50;

            initiateSlider("precisionSliderOne", "precisionLabelOne",
              "formPrecision", initialValue, "precision",
              "precisionProblem", "variability")
            break;
          case "variability" : 
            var initialValue = '#{idea.variabilityOne}' || 50;

            initiateSlider("variabilitySliderOne", "variabilityLabelOne",
              "formVariability", initialValue, "variability",
              "variabilityProblem", "sensitivity")
            break;
          case "sensitivity" : 
            var initialValue = '#{idea.sensitivityOne}' || 50;

            initiateSlider("sensitivitySliderOne", "sensitivityLabelOne",
              "formSensitivity", initialValue, "sensitivity",
              "sensitivityProblem", "immaturity")
            break;
          case "immaturity" : 
            var initialValue = '#{idea.immatureOne}' || 50;

            initiateSlider("immaturitySliderOne", "immaturityLabelOne",
              "formImmaturity", initialValue, "immaturity",
              "immatureProblem", "dangerous")
            break;
          case "dangerous" : 
            var initialValue = '#{idea.dangerOne}' || 50;

            initiateSlider("dangerousSliderOne", "dangerousLabelOne",
              "formDangerous", initialValue, "dangerous",
              "dangerProblem", "skills")
            break;
          case "skills" : 
            var initialValue = '#{idea.skillsOne}' || 50;

            initiateSlider("skillsSliderOne", "skillsLabelOne",
              "formSkills", initialValue, "skills",
              "skillsProblem", "view-all")
            break;
        }

    }


    function initiateSlider(sliderName, labelName, formName, initialValue, postPath, problemName, nextCategory){
      var labelArr = _.range(101).map(function(number){
        return number.toString();
      });
      var min=1, max=100, valueEntered = false, uiValue;
      
      $("#"+ sliderName).slider({
        value:initialValue,
        min: min,
        max: max,
        step: 1,
        slide: function( event, ui ) {
            valueEntered = true;
            uiValue = ui.value;
            $("#" + labelName).text(labelArr[ui.value]);
            $("#" + labelName).css("margin-left", (ui.value-min)/(max-min)*100+"%");
            $("#" + labelName).css("left", "-50px");
        }
      });
      $("#" + labelName).text(labelArr[initialValue]);
      $("#" + labelName ).css("margin-left", (initialValue -1)/(max-min)*100+"%");
      $("#" + labelName).css("left", "-50px");

      
      //kind of a hack because I couldnt get the previous click event handlers
      // to detach from the submit button between viability categories
      // as the user went through more than one in a row. I tried the jquery unbind and off
      // functions
      $("#viabilitySubmit").remove();
      $("<button class='btn btn-success' id='viabilitySubmit'>Save</button>")
      .appendTo("#viabilityModal .modal-footer.view-all-button")
      .click(function(event){
        var data = {
          isModal : true
        };
        if(valueEntered){
          data[sliderName+"Value"] = uiValue;
          
        } 
        if($("#"+formName + " textarea").val() != "The problem of "){
          data[problemName] = $("#"+formName + " textarea").val();
        }
        $.post('/' + postPath, data, function(returnData, status){
          //dont do anything with this return data, because we need to get the modal version
          // of the nextCategory page
          
          if(nextCategory == "view-all"){
            window.location.reload(true);
          } else {
            $.get("/" + nextCategory, {isModal : true}, function(returnData, status){
              $("#viabilityModal .modal-body .view-specific-viability").html("")
              $("#viabilityModal .modal-body .view-specific-viability").append(returnData);
              getNextSliderConfig(nextCategory);
            });
          }
        });

      });
    }

    $("a.viabilityLink").click(function(event){
      event.preventDefault();
      var data = {
        "isModal" : true
      };
      var pathname = $(this)[0].pathname;
      $.get(pathname, data, function(returnData, status){
        $("#viabilityModal .view-all-viabilities").hide();
        //$("#viabilitySubmit").attr("data-viability-category", pathname.slice(1));
        $("#viabilityModal .modal-body .view-specific-viability").append(returnData)

        getNextSliderConfig(pathname.slice(1));

      });
    });

    $("#viabilityModal .modal-view-all").click(function(eventView){
      //if view all viabilities is not visible, remove contents and show 
      // the view-all view
      if(!$(".view-all-viabilities").is(":visible")){
        $("#viabilityModal .modal-body .view-specific-viability").html("")
        //$("#viabilitySubmit").attr("data-viability-category", "view-all");
        $("#viabilityModal .view-all-viabilities").show();
        
        $.get('/update-viability-scores', function(returnData, status){
          $(".view-all-viabilities .ui-slider").html("");
          initializeAllSliders(returnData);
        });
      }
    });

    $(window).load(function(){
        if("!{idea.name}" == ""){
          $('#titleModal').modal('show');
        }
        if("!{idea.alternatives.length}" == "0"){
          $("#idea-summary-alternatives")
            .addClass("incomplete-data");
          $("#idea-summary-alternatives a")
            .before("<h4><i>No data entered</i></h4>");
        }
        if("!{idea.images.length}" == "0"){
          $("#idea-summary-annotate")
            .addClass("incomplete-data");
          $("#idea-summary-annotate a")
            .before("<h4><i>No data entered</i></h4>");
        }
        if("!{idea.description}" == ""){
          $("#idea-summary-accomplish")
            .addClass("incomplete-data");
          $("#idea-summary-accomplish a")
            .before("<h4><i>No data entered</i></h4>");
        }
        if("!{idea.problem}" == ""){
          $("#idea-summary-challenge")
            .addClass("incomplete-data");
          $("#idea-summary-challenge a")
            .before("<h4><i>No data entered</i></h4>");
        }
    });

    $("#problemSubmit").click(function(event){
      event.preventDefault();
      $.post('/add-idea-problem', 
        {
          problemStatement : $("#problemStatement").val().slice(15),
          problemArea : $("#problemArea option:selected").text(),
        },
        function(resp) {
          window.location.reload(true);
        });      
    });

    $("#componentSubmit").click(function(event){
      event.preventDefault();


      $.post('/add-idea-component', 
        {
          componentName : $("#componentName").val().slice(24),
          componentDescription : $("#componentDescription").val().slice(20)
        },
        function(data, response) {
          if(document.getElementById("fileInput").files.length != 0){
            $("#image-component").val( data['identifier'] );
            document.getElementById("formImageUpload").submit();
          }
          $("#idea-summary-components ul")
            .append("<li><a href='/component-profile/"+ data['identifier'] +"'><h4>"+ data['number'] + " : " + data['text'] + "</h4></a></li>");
          $("#componentName").val('');
          $("#componentDescription").val('');
          $("#addComponentModal").modal('hide');
        });      
    });

    // This is for the idea name
    var inputName = $("#saveIdeaName input")[0];
    var requiredNameText = "My idea is named "
    $("#saveIdeaName .charactersRemaining").text((30) + " characters remaining");
    inputName.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1) {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
    }, false);

    inputName.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1) {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
      $("#saveIdeaName input").keyup(function(){
        $("#saveIdeaName .charactersRemaining").text((30 + requiredNameText.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the problem input
    var inputProb = $("#addIdeaProblem input")[0];
    var requiredProbText = "The problem is "
    $("#addIdeaProblem .charactersRemaining").text((200) + " characters remaining");
    inputProb.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredProbText) == -1) {
            $(this).val(requiredProbText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
    }, false);

    inputProb.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredProbText) == -1) {
            $(this).val(requiredProbText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
      $("#addIdeaProblem input").keyup(function(){
        $("#addIdeaProblem .charactersRemaining").text((200 + requiredProbText.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the first text input field in the add component modal
    var inputOne = $("#addIdeaComponent input#componentName")[0];
    var requiredCompTextOne = "The component is called "
    $("#addIdeaComponent .compNameCharRemaining").text((200) + " characters remaining");
    inputOne.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1) {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < 24) {
        this.selectionStart = 24;
      }
    }, false);

    inputOne.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1) {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < 24) {
        this.selectionStart = 24;
      }
      $("#addIdeaComponent input#componentName").keyup(function(){
        $("#addIdeaComponent .compNameCharRemaining").text((200 + requiredCompTextOne.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the second text input field in the add component modal
    var inputTwo = $("#addIdeaComponent input#componentDescription")[0];
    var requiredCompTextTwo = "The way it works is "
    $("#addIdeaComponent .compDescrCharRemaining").text((200) + " characters remaining");
    inputTwo.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
    }, false);

    inputTwo.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
      $("#addIdeaComponent input#componentDescription").keyup(function(){
        $("#addIdeaComponent .compDescrCharRemaining").text((200 + requiredCompTextTwo.length - $(this).val().length) + " characters remaining");
      });
    }, false);
