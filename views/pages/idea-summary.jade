doctype html
html
  head
    include ../partials/head.jade
  body
  .header
    include ../partials/header.jade

  .idea-summary.contributor-idea-summary


    .edit-column.col-md-4
      .imagesList
        if(imageURLs)
          each imageURL, index in imageURLs
            if index < 3
              img.imageListItems(src=imageURL[1] style=imageURL[2])
          h4
            if Object.keys(user).length != 0
              a.btn.btn-default( href="/image-upload" ) View All Images
      h3 Idea Summary for #{idea.name}
      #contributor-idea-summary-aptitudes.aptitudeList
        .profileAptitudes
          if aptitudes
            h3 Aptitudes : 
            ul
              each aptitude in aptitudes
                li(data-apt-id="#{aptitude.identifier}") 
                  a(href="/aptitudes/" + aptitude.title) #{aptitude.title}
      #sharing
        h3 Crowd Improve : 
          p
            a.btn.btn-default#shareIdea Share

    .col-md-8
      h4
        button(type="button" id="emailShareButton" class="btn btn-default pull-right clearfix" data-toggle="modal" data-target="#shareModal")
          span.glyphicon.glyphicon-envelope      

      //
        Navigation tabs
      ul.nav.nav-tabs(role="tablist")
        li.active(role="presention")
          a(href="#components" aria-controls="components" role="tab" data-toggle="tab") Components
        li(role="presention")
          a(href="#issues" aria-controls="issues" role="tab" data-toggle="tab") Issues
        li(role="presention")
          a(href="#suggestions" aria-controls="suggestions" role="tab" data-toggle="tab") Suggestions
      //
        Tab content
      .tab-content.components-issues-suggestions-block
        .tab-pane.active#components(role="tabpanel")
          .idea-summary-data#idea-summary-components
            h4 Components
            if components
              ul
                each component, index in components
                  if component['text'] && index < 5            
                    if component['identifier'] && Object.keys(user).length != 0
                      li 
                        a(href="/component-profile/"+component['identifier'])
                          h4 #{component['number']} : #{component['text']}
                    else
                      li 
                        h4 #{component['number']} : #{component['text']}
                  else if component['descriptions'].length > 0  && index < 5
                    if component['identifier'] && Object.keys(user).length != 0
                      li
                        a(href="/component-profile/"+component['identifier'])
                          h4 #{component['descriptions'][0]}
                    else
                      li
                        h4 #{component['descriptions'][0]}


            if Object.keys(user).length != 0
              button(type="button" id="componentModalButton"  class="btn btn-default" data-toggle="modal" data-target="#addComponentModal") Add a Component

        .tab-pane#issues(role="tabpanel")
          .idea-summary-data#idea-summary-problems
            h4 Idea Problems
            h5 Recent Problems
            // problem loop goes here, copy from idea summary

            if Object.keys(user).length != 0
              button(type="button" id="problemModalButton"  class="btn btn-default" data-toggle="modal" data-target="#addProblemModal") Add a Problem
              |  
              a.btn.btn-default( href="/sort-problems" ) Sort Existing Problems
        .tab-pane#suggestions(role="tabpanel")
          h4 Same as components at the moment. Soon to change.

      .idea-summary-data#idea-summary-waste-values
        h4 Idea Viability Scores
        if Object.keys(user).length == 0
          a.btn.btn-default( type="button" id="viabilityModalButton"  class="btn btn-default" data-toggle="modal" data-target="#viabilityModal") View All
          |  
          a.btn.btn-default( href="/" ) Log in to Review
        else if !currentlyReviewing
          a.btn.btn-default( href="/begin-contributor-review" ) Start Review
        else if currentlyReviewing
          a.btn.btn-default( type="button" id="viabilityModalButton"  class="btn btn-default" data-toggle="modal" data-target="#viabilityModal") View All
        br

  #viabilityModal.modal.fade(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Idea Viability Scores
        .modal-body
          .view-all-viabilities
              include ../partials/viability-overview-modal.jade
          .view-specific-viability
        .modal-footer.view-all-button
            if Object.keys(user).length != 0
              button.btn.btn-info.modal-view-all View All
              button.btn.btn-info.cancel-button(data-dismiss="modal") Cancel
              button.btn.btn-success#viabilitySubmit(data-viability-category="view-all") Save
            else
              button.btn.btn-info.cancel-button(data-dismiss="modal") Close

  #shareModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Share Your Idea
        .modal-body
          form(role='form', id="shareForm" action="/share-idea", method="post", style='max-width: 300px;')
            .form-group
              input#toEmailAddress.form-control(type="email", name="toEmailAddress" placeholder="Your friend's email address" required)
              input#fromEmailAddress.form-control(type="email", name="fromEmailAddress" placeholder="Your email address" required)
              input#emailSubject.form-control(type="text", name="emailSubject" placeholder="Subject of email" required)
              textarea#emailBody.form-control(type="text", name="emailBody" placeholder="The body of your email, possibly including a link to your idea." required)
              input(type="hidden", name="_csrf", value="#{csrfToken}")
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#emailSend(type='submit') Send

  include ../partials/js-includes.jade
  script(type="text/javascript").
    function initializeAllSliders(review){
      var labelArr = _.range(101).map(function(number){
        return number.toString();
      });
      var initialValue, min=1, max=100, valueEntered = false;
      var viabilitySliders = [
        "#perf",
        "#afford",
        "#feature",
        "#deliver",
        "#useability",
        "#maintain",
        "#danger",
        "#durability",
        "#image",
        "#complex",
        "#precision",
        "#variability",
        "#sensitivity",
        "#immature",
        "#skills"
      ]

      for(var i = 0; i < viabilitySliders.length; i++){      
        valueEntered = false;
        switch (viabilitySliders[i]){
          case "#perf" : 
            initialValue = review.performOne || '#{currentReview.performOne}' || 50;
            if(review.performOne || '#{currentReview.performOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#afford" : 
            initialValue = review.affordOne || '#{currentReview.affordOne}' || 50;
            if(review.affordOne || '#{currentReview.affordOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#feature" : 
            initialValue = review.featureOne || '#{currentReview.featureOne}' || 50;
            if(review.featureOne || '#{currentReview.featureOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#deliver" : 
            initialValue = review.deliverOne || '#{currentReview.deliverOne}' || 50;
            if(review.deliverOne || '#{currentReview.deliverOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#useability" : 
            initialValue = review.useabilityOne || '#{currentReview.useabilityOne}' || 50;
            if(review.useabilityOne || '#{currentReview.useabilityOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#maintain" : 
            initialValue = review.maintainOne || '#{currentReview.maintainOne}' || 50;
            if(review.maintainOne || '#{currentReview.maintainOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#danger" : 
            initialValue = review.dangerOne || '#{currentReview.dangerOne}' || 50;
            if(review.dangerOne || '#{currentReview.dangerOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#durability" : 
            initialValue = review.durabilityOne || '#{currentReview.durabilityOne}' || 50;
            if(review.durabilityOne || '#{currentReview.durabilityOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#image" : 
            initialValue = review.imageOne || '#{currentReview.imageOne}' || 50;
            if(review.imageOne || '#{currentReview.imageOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#complex" : 
            initialValue = review.complexOne || '#{currentReview.complexOne}' || 50;
            if(review.complexOne || '#{currentReview.complexOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#precision" : 
            initialValue = review.precisionOne || '#{currentReview.precisionOne}' || 50;
            if(review.precisionOne || '#{currentReview.precisionOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#variability" : 
            initialValue = review.variabilityOne || '#{currentReview.variabilityOne}' || 50;
            if(review.variabilityOne || '#{currentReview.variabilityOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#sensitivity" : 
            initialValue = review.sensitivityOne || '#{currentReview.sensitivityOne}' || 50;
            if(review.sensitivityOne || '#{currentReview.sensitivityOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#immature" : 
            initialValue = review.immatureOne || '#{currentReview.immatureOne}' || 50;
            if(review.immatureOne || '#{currentReview.immatureOne}'!=""){
              valueEntered = true;
            }
            break;
          case "#skills" : 
            initialValue = review.skillsOne || '#{currentReview.skillsOne}' || 50;
            if(review.skillsOne || '#{currentReview.skillsOne}'!=""){
              valueEntered = true;
            }
            break;
        }

        ////////////////////////////////////////////
        // SET UP SLIDER ONE
        ////////////////////////////////////////////
        var sliderDisabled = Number("#{Object.keys(user).length}") == 0;

        $(viabilitySliders[i]+ "Slider").slider({
          disabled : sliderDisabled,
          value:initialValue,
          orientation : "horizontal",
          range : "min",
          min: min,
          max: max,
          step: 1,
          slide: function( event, ui ) {
              valueEntered = true;
              $(this).addClass("value-entered");
          }
        });

        if(valueEntered){
          $(viabilitySliders[i]+ "Slider").addClass("value-entered");
        }

      }

      //kind of a hack because I couldnt get the previous click event handlers
      // to detach from the submit button between viability categories
      // as the user went through more than one in a row. I tried the jquery unbind and off
      // functions
      if(!sliderDisabled){
        $("#viabilitySubmit").remove();
        $("<button class='btn btn-success' id='viabilitySubmit'>Save</button>")
        .appendTo("#viabilityModal .modal-footer.view-all-button")
        .click(function(event){

          var data = {_csrf : $('[name="_csrf"]').val()};
          $(".ui-slider").each(function(index, element){
            switch ($(this).attr("id")){
              case "perfSlider" : 
                if($(element).hasClass("value-entered")){
                  data["performOne"] = $(element).slider("value");
                }
                break;
              case "affordSlider" : 
                if($(element).hasClass("value-entered")){
                  data["affordOne"] = $(element).slider("value");
                }
                break;
              case "featureSlider" : 
                if($(element).hasClass("value-entered")){
                  data["featureOne"] = $(element).slider("value");
                }
                break;
              case "deliverSlider" : 
                if($(element).hasClass("value-entered")){
                  data["deliverOne"] = $(element).slider("value");
                }
                break;
              case "useabilitySlider" : 
                if($(element).hasClass("value-entered")){
                  data["useabilityOne"] = $(element).slider("value");
                }
                break;
              case "maintainSlider" : 
                if($(element).hasClass("value-entered")){
                  data["maintainOne"] = $(element).slider("value");
                }
                break;
              case "dangerSlider" : 
                if($(element).hasClass("value-entered")){
                  data["dangerOne"] = $(element).slider("value");
                }
                break;
              case "durabilitySlider" : 
                if($(element).hasClass("value-entered")){
                  data["durabilityOne"] = $(element).slider("value");
                }
                break;
              case "imageSlider" : 
                if($(element).hasClass("value-entered")){
                  data["imageOne"] = $(element).slider("value");
                }
                break;
              case "complexSlider" : 
                if($(element).hasClass("value-entered")){
                  data["complexOne"] = $(element).slider("value");
                }
                break;
              case "precisionSlider" : 
                if($(element).hasClass("value-entered")){
                  data["precisionOne"] = $(element).slider("value");
                }
                break;
              case "variabilitySlider" : 
                if($(element).hasClass("value-entered")){
                  data["variabilityOne"] = $(element).slider("value");
                }
                break;
              case "sensitivitySlider" : 
                if($(element).hasClass("value-entered")){
                  data["sensitivityOne"] = $(element).slider("value");
                }
                break;
              case "immatureSlider" : 
                if($(element).hasClass("value-entered")){
                  data["immatureOne"] = $(element).slider("value");
                }
                break;
              case "skillsSlider" : 
                if($(element).hasClass("value-entered")){
                  data["skillsOne"] = $(element).slider("value");
                }
                break;
            }
          });
          $.post('/update-all-viabilities', data, function(returnData, status){
            if(status=="success"){
              window.location.reload(true);
            }
          });
        });
      } //end of adding the submit button
    } // end of initialize all sliders function

    
    if ('#{currentlyReviewing}' != ""){
      //actually invoke this method. it will be used later when some one hits the 
      // view all button
      initializeAllSliders("#{currentReview._doc}");
    }


    function getNextSliderConfig(categoryName){
        switch (categoryName) {
          case "view-all":
            break;
          case "performability" : 
            var initialValue = '#{currentReview.performOne}' || 50;

            initiateSlider("perfSliderOne", "perfLabelOne",
              "formPerformability", initialValue, "performability",
              "performProblem", "affordability")
            break;

          case "affordability" : 
            var initialValue = '#{currentReview.affordOne}' || 50;

            initiateSlider("affordSliderOne", "affordLabelOne",
              "formAffordability", initialValue, "affordability",
              "affordProblem", "featurability")
            break;
          case "featurability" : 
            var initialValue = '#{currentReview.featureOne}' || 50;

            initiateSlider("featureSliderOne", "featureLabelOne",
              "formFeaturability", initialValue, "featurability",
              "featureProblem", "deliverability")
            break;
          case "deliverability" : 
            var initialValue = '#{currentReview.deliverOne}' || 50;

            initiateSlider("deliverSliderOne", "deliverLabelOne",
              "formDeliverability", initialValue, "deliverability",
              "deliverProblem", "useability")
            break;
          case "useability" : 
            var initialValue = '#{currentReview.useabilityOne}' || 50;

            initiateSlider("useabilitySliderOne", "useabilityLabelOne",
              "formUseability", initialValue, "useability",
              "useabilityProblem", "maintainability")
            break;
          case "maintainability" : 
            var initialValue = '#{currentReview.maintainOne}' || 50;

            initiateSlider("maintainabilitySliderOne", "maintainabilityLabelOne",
              "formMaintainability", initialValue, "maintainability",
              "maintainProblem", "durability")
            break;
          case "durability" : 
            var initialValue = '#{currentReview.durabilityOne}' || 50;

            initiateSlider("durabilitySliderOne", "durabilityLabelOne",
              "formDurability", initialValue, "durability",
              "durabilityProblem", "imageability")
            break;
          case "imageability" : 
            var initialValue = '#{currentReview.durabilityOne}' || 50;

            initiateSlider("imageabilitySliderOne", "imageabilityLabelOne",
              "formImageability", initialValue, "imageability",
              "imageProblem", "complexity")
            break;
          case "complexity" : 
            var initialValue = '#{currentReview.complexOne}' || 50;

            initiateSlider("complexitySliderOne", "complexityLabelOne",
              "formComplexity", initialValue, "complexity",
              "complexProblem", "precision")
            break;
          case "precision" : 
            var initialValue = '#{currentReview.precisionOne}' || 50;

            initiateSlider("precisionSliderOne", "precisionLabelOne",
              "formPrecision", initialValue, "precision",
              "precisionProblem", "variability")
            break;
          case "variability" : 
            var initialValue = '#{currentReview.variabilityOne}' || 50;

            initiateSlider("variabilitySliderOne", "variabilityLabelOne",
              "formVariability", initialValue, "variability",
              "variabilityProblem", "sensitivity")
            break;
          case "sensitivity" : 
            var initialValue = '#{currentReview.sensitivityOne}' || 50;

            initiateSlider("sensitivitySliderOne", "sensitivityLabelOne",
              "formSensitivity", initialValue, "sensitivity",
              "sensitivityProblem", "immaturity")
            break;
          case "immaturity" : 
            var initialValue = '#{currentReview.immatureOne}' || 50;

            initiateSlider("immaturitySliderOne", "immaturityLabelOne",
              "formImmaturity", initialValue, "immaturity",
              "immatureProblem", "dangerous")
            break;
          case "dangerous" : 
            var initialValue = '#{currentReview.dangerOne}' || 50;

            initiateSlider("dangerousSliderOne", "dangerousLabelOne",
              "formDangerous", initialValue, "dangerous",
              "dangerProblem", "skills")
            break;
          case "skills" : 
            var initialValue = '#{currentReview.skillsOne}' || 50;

            initiateSlider("skillsSliderOne", "skillsLabelOne",
              "formSkills", initialValue, "skills",
              "skillsProblem", "view-all")
            break;
        }

    }


    function initiateSlider(sliderName, labelName, formName, initialValue, postPath, problemName, nextCategory){
      var labelArr = _.range(101).map(function(number){
        return number.toString();
      });
      var min=1, max=100, valueEntered = false, uiValue;
      var sliderDisabled = Number("#{Object.keys(user).length}") == 0;
      
      $("#"+ sliderName).slider({
        disabled : sliderDisabled,
        value:initialValue,
        orientation : "horizontal",
        range : "min",
        min: min,
        max: max,
        step: 1,
        slide: function( event, ui ) {
            valueEntered = true;
            uiValue = ui.value;
            $(this).addClass("value-entered");
            $("#" + labelName).text(labelArr[ui.value]);
            $("#" + labelName).css("margin-left", (ui.value-min)/(max-min)*100+"%");
            $("#" + labelName).css("left", "-50px");
        }
      });
      $("#" + labelName).text(labelArr[initialValue]);
      $("#" + labelName ).css("margin-left", (initialValue -1)/(max-min)*100+"%");
      $("#" + labelName).css("left", "-50px");

      
      //kind of a hack because I couldnt get the previous click event handlers
      // to detach from the submit button between viability categories
      // as the user went through more than one in a row. I tried the jquery unbind and off
      // functions
      $("#viabilitySubmit").remove();
      $("<button class='btn btn-success' id='viabilitySubmit'>Save</button>")
      .appendTo("#viabilityModal .modal-footer.view-all-button")
      .click(function(event){
          var data = {};
          if(valueEntered){
            data[sliderName+"Value"] = uiValue;
            
          } 
          if($("#"+formName + " textarea").val() != "The problem of "){
            data[problemName] = $("#"+formName + " textarea").val();
          }
          $.post('/' + postPath, data, function(returnData, status){
            //dont do anything with this return data, because we need to get the modal version
            // of the nextCategory page
            if(nextCategory == "view-all"){
              window.location.reload(true);
            } else {
              $.get("/" + nextCategory, {isModal : true}, function(returnData, status){
                $("#viabilityModal .modal-body .view-specific-viability").html("")
                $("#viabilityModal .modal-body .view-specific-viability").append(returnData);
                getNextSliderConfig(nextCategory);
              });
            }
          });
      });
    }




    $("a.viabilityLink").click(function(event){
      event.preventDefault();
      var data = {
        "isModal" : true
      };
      var pathname = $(this)[0].pathname;
      $.get(pathname, data, function(returnData, status){
        $("#viabilityModal .view-all-viabilities").hide();
        //$("#viabilitySubmit").attr("data-viability-category", pathname.slice(1));
        $("#viabilityModal .modal-body .view-specific-viability").append(returnData)

        getNextSliderConfig(pathname.slice(1));

      });
    });

    $("#viabilityModal .modal-view-all").click(function(eventView){
      //if view all viabilities is not visible, remove contents and show 
      // the view-all view
      if(!$(".view-all-viabilities").is(":visible")){
        $("#viabilityModal .modal-body .view-specific-viability").html("")
        //$("#viabilitySubmit").attr("data-viability-category", "view-all");
        $("#viabilityModal .view-all-viabilities").show();
        
        $.get('/update-viability-scores', function(returnData, status){
          $(".view-all-viabilities .ui-slider").html("");
          initializeAllSliders(returnData);
        });
      }
    });

    $(window).load(function(){
        if("!{idea.name}" == ""){
          $('#titleModal').modal('show');
        }
        if("!{idea.description}" == ""){
          $("#idea-summary-accomplish")
            .addClass("incomplete-data");
          $("#idea-summary-accomplish a")
            .before("<h4><i>No data entered</i></h4>");
        }
        if("!{idea.problem}" == ""){
          $("#idea-summary-challenge")
            .addClass("incomplete-data");
          $("#idea-summary-challenge a")
            .before("<h4><i>No data entered</i></h4>");
        }

        $("#openTitleModal").click(function(event){
          $("#whatsLeftModal").modal('hide');
          $('#titleModal').modal('show');
        })

        $("#openAddProblemModal").click(function(event){
          $("#whatsLeftModal").modal('hide');
          $('#addProblemModal').modal('show');
        })

        $("#openViabilityModal").click(function(event){
          $("#whatsLeftModal").modal('hide');
          $('#viabilityModalButton').click();
        })

        $("#viewComponentsTab").click(function(event){
          $("#whatsLeftModal").modal('hide');
          $('a').filter(function(index) { return $(this).text() === "Components"; }).click();
        })


    });

    $("#problemSubmit").click(function(event){
      event.preventDefault();
      $.post('/add-idea-problem', 
        {
          _csrf : $('[name="_csrf"]').val(),
          problemStatement : $("#problemStatement").val().slice(15),
          problemArea : $("#problemArea option:selected").text(),
        },
        function(resp) {
          window.location.reload(true);
        });      
    });

    $("#componentSubmit").click(function(event){
      event.preventDefault();


      $.post('/add-idea-component', 
        {
          _csrf : $('[name="_csrf"]').val(),
          componentName : $("#componentName").val().slice(24),
          componentDescription : $("#componentDescription").val().slice(20)
        },
        function(data, response) {
          if(document.getElementById("fileInput").files.length != 0){
            $("#image-component").val( data['identifier'] );
            // This doesnt work for some reason....
            document.getElementById("formImageUpload").submit();
          }
          $("#idea-summary-components ul")
            .append("<li><a href='/component-profile/"+ data['identifier'] +"'><h4>"+ data['number'] + " : " + data['text'] + "</h4></a></li>");
          $("#componentName").val('');
          $("#componentDescription").val('');
          $("#addComponentModal").modal('hide');
        });      
    });

    // This is for the idea name
    var inputName = $("#saveIdeaName input")[0];
    var requiredNameText = "My idea is named "
    $("#saveIdeaName .charactersRemaining").text((30) + " characters remaining");
    inputName.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1) {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
    }, false);

    inputName.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1) {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
      $("#saveIdeaName input").keyup(function(){
        $("#saveIdeaName .charactersRemaining").text((30 + requiredNameText.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the problem input
    var inputProb = $("#addIdeaProblem input")[0];
    var requiredProbText = "The problem is "
    $("#addIdeaProblem .charactersRemaining").text((200) + " characters remaining");
    inputProb.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredProbText) == -1) {
            $(this).val(requiredProbText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
    }, false);

    inputProb.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredProbText) == -1) {
            $(this).val(requiredProbText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
      $("#addIdeaProblem input").keyup(function(){
        $("#addIdeaProblem .charactersRemaining").text((200 + requiredProbText.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the first text input field in the add component modal
    var inputOne = $("#addIdeaComponent input#componentName")[0];
    var requiredCompTextOne = "The component is called "
    $("#addIdeaComponent .compNameCharRemaining").text((200) + " characters remaining");
    inputOne.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1) {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < 24) {
        this.selectionStart = 24;
      }
    }, false);

    inputOne.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1) {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < 24) {
        this.selectionStart = 24;
      }
      $("#addIdeaComponent input#componentName").keyup(function(){
        $("#addIdeaComponent .compNameCharRemaining").text((200 + requiredCompTextOne.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the second text input field in the add component modal
    var inputTwo = $("#addIdeaComponent input#componentDescription")[0];
    var requiredCompTextTwo = "The way it works is "
    $("#addIdeaComponent .compDescrCharRemaining").text((200) + " characters remaining");
    inputTwo.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
    }, false);

    inputTwo.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
      $("#addIdeaComponent input#componentDescription").keyup(function(){
        $("#addIdeaComponent .compDescrCharRemaining").text((200 + requiredCompTextTwo.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    $("#aptitudeSubmit").click(function(event){
      event.preventDefault();
      if($("#aptitudeTitle").val() != ""){
        $.post('/save-aptitude', 
          {
            _csrf : $('[name="_csrf"]').val(),
            ideaName : "!{idea.name}",
            aptitudeTitle : $("#aptitudeTitle").val()
          },
          function(resp) {
            window.location.reload(true);
          });
      } else {
        alert("Please enter a valid aptitude.");
      }
    });

    $("#emailSend").click(function(event){
      event.preventDefault();
        $.post('/share-idea', 
          {
            _csrf : $('[name="_csrf"]').val(),
            toEmailAddress : $("#toEmailAddress").val(),
            fromEmailAddress : $("#fromEmailAddress").val(),
            emailSubject : $("#emailSubject").val(),
            emailBody : $("#emailBody").val()
          },
          function(resp) {
            window.location.reload(true);
          });
    });
