doctype html
html
  head
    include ../partials/head.jade
  body
  .header
    span.userName Howdy #{user.username}
    |  
    .profile-headshot
      if headshot
        img.placeholder(src=headshot height="75" width="75")
        a.plus-overlay(href="/profile-picture")
          img(src='/plus-overlay.png' height="75" width="75")
      else  
        img.placeholder(src="/avatar.png" height="75" width="75")
        a.plus-overlay(href="/profile-picture")
          img(src='/plus-overlay.png' height="75" width="75")
    a.home-logout.btn.btn-default( href="/begin" ) My Profile
    | 
    a.home-logout.btn.btn-default( href="/logout" ) Log Out

  .idea-summary
    h3 Idea Summary for #{idea.name}

    .edit-column.half-column
      .imagesList
        if(imageURLs)
          h4 Uploaded Images
          each imageURL, index in imageURLs
            if index == 0
              .image-summary-image
                img(src=imageURL[1] height="300" width="400")
            if index < 3 && index > 0
              img.imageListItems(src=imageURL[1])
          .view-all-images-btn
            a.btn.btn-default( href="/image-upload" ) View All Images

    .idea-function-column.half-column
      .idea-summary-data#idea-summary-components
        h4 Components
        if components
          ul
            each component in components
              if component['text']            
                if component['identifier']
                  li 
                    a(href="/component-profile/"+component['identifier'])
                      h4 #{component['number']} : #{component['text']}
                else
                  li 
                    h4 #{component['number']} : #{component['text']}
              else if component['descriptions'].length > 0
                if component['identifier']
                  li
                    a(href="/component-profile/"+component['identifier'])
                      h4 #{component['descriptions'][0]}
                else
                  li
                    h4 #{component['descriptions'][0]}


        button(type="button" id="componentModalButton"  class="btn btn-default" data-toggle="modal" data-target="#addComponentModal") Add a Component
      .idea-summary-data#idea-summary-waste-values
        h4 Waste Value Scores
        a.btn.btn-default( href="/waste-values-summary" ) View All
        br
      .idea-summary-data#idea-summary-problems
        h4 Idea Problems
        h5 Recent Problems
        ul.idea-summary-problem-list
          each problem, index in problems
            if(index < 3 && problem.text)
              li
                p #{index + 1} : #{problem.text}
        button(type="button" id="problemModalButton"  class="btn btn-default" data-toggle="modal" data-target="#addProblemModal") Add a Problem
        |  
        a.btn.btn-default( href="/sort-problems" ) Sort Existing Problems

      .idea-summary-data#idea-summary-challenge
        h4 Challenge
        p <i>#{idea.problem}</i>
        a.btn.btn-default( href="/introduce-idea" ) Edit > 
        br
      .idea-summary-data#idea-summary-accomplish
        h4 Description
        p <i>#{idea.description}</i>
        a.btn.btn-default( href="/accomplish" ) Edit >
        br

.inventor-only-idea-summary
  h1 For the Inventor
  .half-column
    h4 Suggestions
    a.btn.btn-default( href="/suggestion-summary" ) Make Suggestions
    br
    br
  .half-column
    br
    h4 Application
    a.btn.btn-default( href="/create-application" ) Download Application
    br
    br
    h4 Variants 
    each variantDate in variantDates
      ul.variantDateList
        li
          a(href="/variant/"+variantDate[1]) #{variantDate[0]}
    a.btn.btn-default( href="/view-idea-suggestions" ) Create a New Variant
    br
    br

  #titleModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Name Your Idea
        .modal-body
          form(role='form', id="saveIdeaName" action="/save-idea-name", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input.form-control(type="text", name="inventionName", value='My idea is named ')
              p (ex. "Flux Capacitor")
              p.charactersRemaining
            .modal-footer
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#submit(type='submit') Save

  #addProblemModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Record a Current Problem
        .modal-body
          form(role='form', id="addIdeaProblem" action="/add-idea-problem", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input#problemStatement.form-control(type="text", name="problemStatement", value='The problem is ')
              p (ex. "It draws too much power")
              p.charactersRemaining
              h3 Select Problem Area:
              select.form-control#problemArea
                  option(value="None Selected") None Selected
                  each value in problemAreas
                    option(value=value) #{value}

            .modal-footer
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#problemSubmit(type='submit') Save
  #addComponentModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Record a New Component
        .modal-body
          form(role='form', id="addIdeaComponent" action="/add-idea-component", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input#componentName.form-control(type="text", name="componentName", value='The component is called ')
              p (ex. "The Start Button")
              p.compNameCharRemaining
              input#componentDescription.form-control(type="text", name="componentDescription", value='The way it works is ')
              p (ex. "it initiates the sequence automatically", < 120 characters)
              p.compDescrCharRemaining
          form(role='form', id="formImageUpload" action="/add-component-image", method="post", data-idea-doc=idea, enctype="multipart/form-data")
            .form-group
              h4 Component Image
              |  
              input#fileInput(type="file", name="picture")
              input(type="hidden" id="image-component" name="imageComponent")



            .modal-footer
              button.btn.btn-info(data-dismiss="modal") Cancel
              button.btn.btn-success#componentSubmit(type='submit') Save

  button(type="button" id="titleModalButton" style="display:none;" class="btn btn-primary" data-toggle="modal" data-target="#titleModal") Go Win Fight


  include ../partials/js-includes.jade
  script(type="text/javascript").
    $(window).load(function(){
        if("!{idea.name}" == ""){
          $('#titleModal').modal('show');
        }
        if("!{idea.alternatives.length}" == "0"){
          $("#idea-summary-alternatives")
            .addClass("incomplete-data");
          $("#idea-summary-alternatives a")
            .before("<h4><i>No data entered</i></h4>");
        }
        if("!{idea.images.length}" == "0"){
          $("#idea-summary-annotate")
            .addClass("incomplete-data");
          $("#idea-summary-annotate a")
            .before("<h4><i>No data entered</i></h4>");
        }
        if("!{idea.description}" == ""){
          $("#idea-summary-accomplish")
            .addClass("incomplete-data");
          $("#idea-summary-accomplish a")
            .before("<h4><i>No data entered</i></h4>");
        }
        if("!{idea.problem}" == ""){
          $("#idea-summary-challenge")
            .addClass("incomplete-data");
          $("#idea-summary-challenge a")
            .before("<h4><i>No data entered</i></h4>");
        }
    });

    $("#problemSubmit").click(function(event){
      event.preventDefault();
      $.post('/add-idea-problem', 
        {
          problemStatement : $("#problemStatement").val(),
          problemArea : $("#problemArea option:selected").text(),
        },
        function(resp) {
          window.location.reload(true);
        });      
    });

    $("#componentSubmit").click(function(event){
      event.preventDefault();


      $.post('/add-idea-component', 
        {
          componentName : $("#componentName").val(),
          componentDescription : $("#componentDescription").val()
        },
        function(data, response) {
          if(document.getElementById("fileInput").files.length != 0){
            $("#image-component").val( data['identifier'] );
            document.getElementById("formImageUpload").submit();
          }
          $("#idea-summary-components ul")
            .append("<li><a href='/component-profile/"+ data['identifier'] +"'><h4>"+ data['number'] + " : " + data['text'] + "</h4></a></li>");
          $("#componentName").val('');
          $("#componentDescription").val('');
          $("#addComponentModal").modal('hide');
        });      
    });

    // This is for the idea name
    var inputName = $("#saveIdeaName input")[0];
    var requiredNameText = "My idea is named "
    $("#saveIdeaName .charactersRemaining").text((30) + " characters remaining");
    inputName.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1) {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
    }, false);

    inputName.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1) {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
      $("#saveIdeaName input").keyup(function(){
        $("#saveIdeaName .charactersRemaining").text((30 + requiredNameText.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the problem input
    var inputProb = $("#addIdeaProblem input")[0];
    var requiredProbText = "The problem is "
    $("#addIdeaProblem .charactersRemaining").text((200) + " characters remaining");
    inputProb.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredProbText) == -1) {
            $(this).val(requiredProbText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
    }, false);

    inputProb.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredProbText) == -1) {
            $(this).val(requiredProbText);
      }
      if (this.selectionStart < 17) {
        this.selectionStart = 17;
      }
      $("#addIdeaProblem input").keyup(function(){
        $("#addIdeaProblem .charactersRemaining").text((200 + requiredProbText.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the first text input field in the add component modal
    var inputOne = $("#addIdeaComponent input#componentName")[0];
    var requiredCompTextOne = "The component is called "
    $("#addIdeaComponent .compNameCharRemaining").text((200) + " characters remaining");
    inputOne.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1) {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < 24) {
        this.selectionStart = 24;
      }
    }, false);

    inputOne.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1) {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < 24) {
        this.selectionStart = 24;
      }
      $("#addIdeaComponent input#componentName").keyup(function(){
        $("#addIdeaComponent .compNameCharRemaining").text((200 + requiredCompTextOne.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the second text input field in the add component modal
    var inputTwo = $("#addIdeaComponent input#componentDescription")[0];
    var requiredCompTextTwo = "The way it works is "
    $("#addIdeaComponent .compDescrCharRemaining").text((200) + " characters remaining");
    inputTwo.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
    }, false);

    inputTwo.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
      $("#addIdeaComponent input#componentDescription").keyup(function(){
        $("#addIdeaComponent .compDescrCharRemaining").text((200 + requiredCompTextTwo.length - $(this).val().length) + " characters remaining");
      });
    }, false);
