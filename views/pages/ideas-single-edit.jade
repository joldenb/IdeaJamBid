doctype html
html
  head
    include ../partials/head.jade
  body
  .header.navbar.navbar-default
    include ../partials/header.jade

  .container-fluid.idea-summary.idea-summary-edit
    .row(class="visibility-row-#{idea.visibility}")
      .col-sm-3
        if idea.name
          h2 #{idea.name}
        if idea.visibility == "private"
          a#visibilityLink
            h4 Visibility : #{idea.visibility.charAt(0).toUpperCase() + idea.visibility.slice(1)}
              span.glyphicon.glyphicon-pencil
        else
          h4 Visibility : #{idea.visibility.charAt(0).toUpperCase() + idea.visibility.slice(1)}
      .col-sm-6
      .col-sm-3
        a.btn.btn-go.btn-lg#file-patent(data-toggle="modal" data-target="#filePatentModal" style="margin-top:1em;") 
          h4 Generate Patent Application

      //- .col-sm-4
      //-   if (inventorName == user.username) && idea.visibility == "private" && idea.collaborators.length < 6
      //-     .row
      //-       .col-xs-12
      //-         a.btn.btn-electric.btn-lg.btn-block#inviteCollaboratorsButton(type="button" data-toggle="modal" data-target="#inviteCollaboratorsModal") Invite Collaborators
      //-         br


      //- if inventorName == user.username
      //-   .col-sm-8.patent-strength-row
      //-     .app-strength-bar.col-md-8
      //-       .app-strength(class="#{appStrengthClass}") #{appStrengthText}
      //-     .col-md-4.app-strength-button
      //-       if appStrengthClass == "yes col-md-12" || idea.visibility == "public"
      //-         a.btn.btn-go.btn-lg.btn-block#file-patent(data-toggle="modal" data-target="#filePatentModal") Generate Patent Application
      //-       else
      //-         a.btn.btn-go.btn-lg.btn-block#whats-left-link(data-toggle="modal" data-target="#whatsLeftModal") Next Steps

    .row.sticky-edit-header.hidden
      if listOfVisibleSections.indexOf('annotate-images-row') == -1
        .col-xs-2.editing-progress
          h5 1/5 Complete
        .col-xs-10.remaining-progress
      else if listOfVisibleSections.indexOf('add-components-row') == -1
        .col-xs-4.editing-progress
          h5 2/5 Complete
        .col-xs-8.remaining-progress
      else if listOfVisibleSections.indexOf('add-aptitudes-row') == -1
        .col-xs-6.editing-progress
          h5 3/5 Complete
        .col-xs-6.remaining-progress
      else if listOfVisibleSections.indexOf('add-imperfections-row') == -1
        .col-xs-10.editing-progress
          h5 4/5 Complete
        .col-xs-2.remaining-progress
      else
        .col-xs-12.editing-progress
          h5 All Idea Editing Sections Visible


    .row#upload-images-row.idea-edit-row.odd-row 
      if listOfVisibleSections.indexOf('add-components-row') == -1
        .col-md-12
          h2 Upload Images
      else
        .col-md-12
          h2 Upload or Annotate Images
          h4 Click an image to annotate
      .imagesList
        - imageURLs.unshift("")
        each imageURL, index in imageURLs
          if( index % 4 == 0 )
            .row
              if ( index == 0 )
                .col-md-3
                  form(role='form', id="formImageUpload" action="/image-upload", method="post", data-idea-doc=idea, enctype="multipart/form-data")
                    .form-group
                      input(type="hidden", name="_csrf", value="#{csrfToken}")
                      label.btn.btn-block.btn-file#fileInput
                        .upload-image-div
                          span.glyphicon.glyphicon-cloud-upload.big-upload-icon
                        input(type="file", name="picture" style="display:none;")
              else if ( imageURL )
                .col-md-3
                  .image-container
                    a(href="/annotate-image/" + imageURL[0])
                      img.imageListItems(src=imageURL[1] style=imageURL[2])
              if ( imageURLs[index+1] )
                .col-md-3
                  .image-container
                    a(href="/annotate-image/" + imageURLs[index+1][0])
                      img.imageListItems(src=imageURLs[index+1][1] style=imageURLs[index+1][2])
              if ( imageURLs[index+2] )
                .col-md-3
                  .image-container
                    a(href="/annotate-image/" + imageURLs[index+2][0])
                      img.imageListItems(src=imageURLs[index+2][1] style=imageURLs[index+2][2])
              if ( imageURLs[index+3] )
                .col-md-3
                  .image-container
                    a(href="/annotate-image/" + imageURLs[index+3][0])
                      img.imageListItems(src=imageURLs[index+3][1] style=imageURLs[index+3][2])
      if listOfVisibleSections.indexOf('annotate-images-row') == -1 && listOfVisibleSections.indexOf('add-components-row') == -1
        .col-xs-12.next-step
          a#upload-image-next-btn.btn.btn-go.btn-lg.btn-block(href="#annotate-images-row") Next Step

    #annotate-images-row(class="odd-row idea-edit-row row #{listOfVisibleSections.indexOf('annotate-images-row') > -1 && listOfVisibleSections.indexOf('add-components-row') == -1 ? '' : 'hidden'}")
      .col-md-12
        h2 Add Components to your Images
        h4 Click an image to annotate
      .imagesList
        if(imageURLs.length > 0)
          each imageURL, index in imageURLs
            if( index % 4 == 0 )
              .row
                if ( imageURL )
                  .col-md-3
                    .image-container
                      a(href="/annotate-image/" + imageURL[0])
                        img.imageListItems(src=imageURL[1] style=imageURL[2])
                if ( imageURLs[index+1] )
                  .col-md-3
                    .image-container
                      a(href="/annotate-image/" + imageURLs[index+1][0])
                        img.imageListItems(src=imageURLs[index+1][1] style=imageURLs[index+1][2])
                if ( imageURLs[index+2] )
                  .col-md-3
                    .image-container
                      a(href="/annotate-image/" + imageURLs[index+2][0])
                        img.imageListItems(src=imageURLs[index+2][1] style=imageURLs[index+2][2])
                if ( imageURLs[index+3] )
                  .col-md-3
                    .image-container
                      a(href="/annotate-image/" + imageURLs[index+3][0])
                        img.imageListItems(src=imageURLs[index+3][1] style=imageURLs[index+3][2])
        else
          a(href="/image-upload")
            .upload-image-div
              span.glyphicon.glyphicon-cloud-upload.big-upload-icon
      if listOfVisibleSections.indexOf('add-components-row') == -1
        .col-xs-12.next-step
          a#annotate-image-next-btn.btn.btn-go.btn-lg.btn-block(href="#add-components-row") Next Step

    #add-components-row(class="odd-row idea-edit-row row #{listOfVisibleSections.indexOf('add-components-row') > -1 ? '' : 'hidden'}")
      .col-xs-12
        if idea.name
          h2 Components
          h4 Add any other components weren't already included in an image
        form(role='form', id="addIdeaComponent" action="/add-idea-component", method="post" data-idea-doc=idea)
          .form-group
            h4 Name the component:
            input#componentName.form-control(type="text", name="componentName", value='The ...')
            //- p (Example: "The Flux Capacitor")
            input(type="hidden", name="_csrf", value="#{csrfToken}")
            //- p.compNameCharRemaining
            h4 Describe the component:
            input#componentDescription.form-control(type="text", name="componentDescription", value='This component is described as ')
            //- p (Example: "This component is described as a power channeling device that processes 1.21 gigawatts to make time travel possible.")
            //- p.compDescrCharRemaining
            br
            button.btn.btn-industry.btn-lg#componentSubmit(type='submit') Save
      .col-md-12.list-all-components
        if components.length > 0
          each component, identifier in wholeSuggestionBlockInfo
            include ../partials/component-summary-element.jade
        else
          h4 <i>No Components Yet</i>
      if listOfVisibleSections.indexOf('add-aptitudes-row') == -1
        .col-xs-12.next-step
          a#add-components-next-btn.btn.btn-go.btn-lg.btn-block(href="#add-aptitudes-row") Next Step
      //- .col-xs-12
      //-   a(href='/ideas/' + idea.name + '/view-all-components')
      //-     button(type="button"  class="btn btn-industry btn-lg btn-block") View All Components

    #add-aptitudes-row(class="odd-row idea-edit-row row #{listOfVisibleSections.indexOf('add-aptitudes-row') == -1 ? 'hidden' : ''}")
      .col-xs-12
        #idea-summary-aptitudes.aptitudeList
          .profileAptitudes
            h2 Aptitude Areas
            h4 Add some areas of focus that relate directly to your invention, e.g. plumbing equipment
            if inventorName == user.username
              form(role='form', id="saveAptitude" action="/save-aptitude", method="post", data-idea-doc=idea)
                .form-group
                  |  
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                  input.form-control.ui-front(type='text', id="aptitudeTitle", name="aptitudeTitle", placeholder='New Aptitude..', autocomplete="on")
                  br    
                  button.btn.btn-industry.btn-lg#aptitudeSubmit(type='submit') Save
              ul
                each aptitude, aptIndex in aptitudes
                  li(data-apt-id="#{aptitude.identifier}") 
                    h4 #{aptitude.title}
      if listOfVisibleSections.indexOf('add-imperfections-row') == -1
        .col-xs-12.next-step
          a#add-aptitudes-next-btn.btn.btn-go.btn-lg.btn-block(href="#add-imperfections-row") Next Step
    
    #add-imperfections-row(class="odd-row #{listOfVisibleSections.indexOf('add-imperfections-row') > -1 ? 'idea-edit-row row' : 'hidden idea-edit-row row'}")
      .col-md-12.idea-seed-imperfections
        h2#imperfections-header Imperfections
        h4 Add any other imperfections that #{idea.name} may currently have that you'd like to improve
        form(role='form', id="addIdeaProblem" action="/add-idea-problem", method="post", data-idea-doc=idea)
          .form-group
            input(type="hidden", name="_csrf", value="#{csrfToken}")
            h4 Describe the imperfection:
            textarea.problemStatement(class="form-control" rows="3")
              | The problem is
            //- p (Example: "The time machine imperfection of needing to accelerate to 88 miles per hour before time travel is initiated.")
            //- p.charactersRemaining
            h4 Type of Imperfection:
            select.form-control#problemArea(required)
              each value in problemAreas
                option(value=value) #{value}
            br
            button.btn.btn-industry.btn-lg.individualProblemSubmit(type='submit') Save
        each problem, index in problems
          if(problem.text && problem['identifier'])
            include ../partials/problem-summary-element.jade
      .col-xs-12.complete-idea-editing
        a#complete-button.btn.btn-go.btn-lg.btn-block(href="/ideas/#{idea.name}") Complete


  .pagefooter
    include ../partials/footer.jade

  #titleModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          .modal-title 
            if user.firstname
              h2 #{user.nickname}, name Your Idea
            else
              h2 Name Your Idea
            p Give your idea a short, descriptive, memorable name:
        .modal-body
          form(role='form', id="saveIdeaName" action="/save-idea-name", method="post", style='max-width: 300px;', data-idea-doc=idea)
            .form-group
              input(type="hidden", name="_csrf", value="#{csrfToken}")
              input.form-control(type="text", name="inventionName", value='My idea is called the ')
              p (Example: "My idea is called the DeLorean Time Machine")
              p.charactersRemaining
            .modal-footer
              button.btn.btn-success#titleSubmit(type='submit') Save
                img.einstein-point-btn-icon(src="/single-einstein-point.png")
          .row
            .col-xs-12
              .hint Hint: Choose a concise, catchy and descriptive name for your idea.

  #filePatentModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            if idea.name
              h3 Visibility status of your #{idea.name.charAt(0).toLowerCase() + idea.name.slice(1)}
              h4 Protect yourself against others who might see and steal ideas from your #{idea.name.charAt(0).toLowerCase() + idea.name.slice(1)}.
              h4 IdeaJam can create a provisional patent application template for your #{idea.name.charAt(0).toLowerCase() + idea.name.slice(1)}.  Filing a patent application before making your ideas visible will provide you with patent pending status over #{idea.name.charAt(0).toLowerCase() + idea.name.slice(1)} earning you potential rights over anyone who later makes or sells the same idea.
            else
              h3 #{user.nickname}, name your idea before starting the process of generating a provisional patent application template.
        .modal-body
            if appStrengthClass == "yes col-md-12" || idea.visibility == "public"
              a.btn.btn-go#create-application-button( href="/create-application" ) Download Application
              br
              if !receipt
                form(role='form', id="prelimReceiptUpload" action="/receipt-upload", method="post", data-idea-doc=idea, enctype="multipart/form-data")
                  .form-group
                    input(type="hidden", name="_csrf", value="#{csrfToken}")
                    input#receiptInput(type="file", name="receipt")
              else
                a(href=receipt.amazonURL download)
                  p Receipt uploaded.
                h4 Variants
                each variantDate in variantDates
                  .row
                    a(href="/ideas/#{idea.name}/variant/"+variantDate[1]) #{variantDate[0]}

                a.btn.btn-go( href="/create-new-variant" ) Create a New Variant
                br
            else if appStrengthClass.indexOf("almost") > -1 || appStrengthClass.indexOf("not-yet") > -1
              if idea.name
                h4 Strong patent applications generally have more descriptions of the invention and its components.   To strengthen the provisional patent application template for your #{idea.name.charAt(0).toLowerCase() + idea.name.slice(1)}, you should enter more information about the concept.
              else
                h3 Name your idea before starting the process of generating a provisional patent application template.
            br

          .modal-footer
            button#enterMoreInformation.btn.btn-info(data-dismiss="modal") Enter More Information
            a.btn.btn-go#bypass-application-button(data-toggle="modal" data-target="#confirmExposeIdeaModal") Expose Idea Now

  #confirmExposeIdeaModal.modal.fade.annotate-modal(role="dialog")
    .modal-dialog
      .modal-content
        .modal-header
          button(type="button", class="close" data-dismiss="modal") &times;
          .modal-title 
            h2 Are you sure?
        .modal-body
          h5 If you expose this idea publicly prior to filing a patent application, you may lose your right to patent the idea. We recommend that you file a patent application before disclosing. Are you sure you want to make this idea public before obtaining patent pending status?
          .modal-footer
            button.btn.btn-industry(data-dismiss="modal") Cancel
            button#exposeIdeaNow.btn.btn-go Yes, Expose Now!


  button(type="button" id="titleModalButton" style="display:none;" class="btn btn-primary" data-toggle="modal" data-target="#titleModal") Go Win Fight

  include ../partials/js-includes.jade
  script(src='/exif.js')
  script(type="text/javascript").
    $(document).ready(function(){
      if("!{idea.name}" == ""){
        $('#titleModal').modal('show');
      }
      if("!{idea.description}" == ""){
        $("#idea-summary-accomplish")
          .addClass("incomplete-data");
        $("#idea-summary-accomplish a")
          .before("<h4><i>No data entered</i></h4>");
      }
      if("!{idea.problem}" == ""){
        $("#idea-summary-challenge")
          .addClass("incomplete-data");
        $("#idea-summary-challenge a")
          .before("<h4><i>No data entered</i></h4>");
      }

      $("#enterMoreInformation").click(function(event){
        $("#whatsLeftModal").modal('show');
      })

      $("#openTitleModal").click(function(event){
        $("#whatsLeftModal").modal('hide');
        $('#titleModal').modal('show');
      })

      $("#openAddProblemModal").click(function(event){
        $("#whatsLeftModal").modal('hide');
        $('#addProblemModal').modal('show');
      })

      $("#viewComponentsTab").click(function(event){
        $("#whatsLeftModal").modal('hide');
        $('a').filter(function(index) { return $(this).text() === "Components"; }).click();
      })
    
      $("#imperfections-header").click(function(event){
        $('#viewAllImperfections').modal('show');
      })

      $(".individualProblemSubmit").click(function(event){
        event.preventDefault();
        if ($(this).siblings(".problemStatement").val().length > 15){
          var newProblemStatement = $(this).siblings(".problemStatement").val().trim();
          $.post('/add-idea-problem', 
            {
              _csrf : $('[name="_csrf"]').val(),
              problemStatement : newProblemStatement.slice(15),
              problemArea : $("#problemArea option:selected").text(),
            },
            function(resp) {
              window.location.href= "/ideas/!{idea.name}/edit?r="+(new Date())+"#add-imperfections-row";
            });
        }
      });

      $(".problemSubmit").click(function(event){
        event.preventDefault();

        var problemText = $(this).siblings("textarea").val();

        if(problemText == "The problem is "){
          $(".viabilty-slider-right-arrow").click();
        } else if (problemText.length > 15){
          var newProblemStatement = problemText.trim();
          $.post('/add-idea-problem', 
            {
              _csrf : $('[name="_csrf"]').val(),
              problemStatement : newProblemStatement.slice(15),
              problemArea : $(this).siblings("input.problemArea").val()
            },
            function(resp) {
              $(".viabilty-slider-right-arrow").click();
            });
        } else {
          $(".viabilty-slider-right-arrow").click();
        }
      });


      $("#titleSubmit").click(function(event){
        event.preventDefault();
        if($("#saveIdeaName input[name='inventionName']").val() == "My idea is called the "){
          if($("#titleRequiredMessage").length == 0){
            $("<p id='titleRequiredMessage'>A title is required</p>").insertBefore("#saveIdeaName input[name='inventionName']");
          }
        } else {
          $.post('/save-idea-name', 
            {
              _csrf : $('[name="_csrf"]').val(),
              inventionName : $("#saveIdeaName input[name='inventionName']").val().trim(),
            },
            function(resp) {
              if(resp['newUrl']){
                window.location = resp['newUrl'];
              } else {
                window.location.reload(true);
              }
            });
        }
      })

      $("#componentSubmit").click(function(event){
        event.preventDefault();

        if($("#componentName").val() == "The ..." || $("#componentName").val() == "The "){
          $("#addComponentModal").modal('hide');
        } else {
          var newComponentName = $("#componentName").val().trim();
          var newComponentDescr;

          var data = {
              _csrf : $('[name="_csrf"]').val(),
              componentName : newComponentName.slice(4)
          };

          if($("#componentDescription").val().length > "This component is described as ".length){
            newComponentDescr = $("#componentDescription").val().trim();
            data['componentDescription'] = newComponentDescr.slice("This component is described as ".length)
          }

          $.post('/add-idea-component', 
            data,
            function(data, response) {
              window.location.href= "/ideas/!{idea.name}/edit?r="+(new Date())+"#add-components-row";
            });      
        }

      });

      $("#subComponentCheckbox").click(function(event){
        $("#parentComponentDropdown").show(400);
      });

      // This is for the idea name
      var inputName = $("#saveIdeaName input")[1];
      var requiredNameText = "My idea is called the "
      $("#saveIdeaName .charactersRemaining").text((30) + " characters remaining");
      inputName.addEventListener ("mousedown", function () {
        if (String($(this).val()).indexOf(requiredNameText) == -1 || String($(this).val()) == "My idea is called the ") {
              $(this).val(requiredNameText);
        }
        if (this.selectionStart < requiredNameText.length) {
          this.selectionStart = requiredNameText.length;
        }
      }, false);

      inputName.addEventListener ("keydown", function () {
        if (String($(this).val()).indexOf(requiredNameText) == -1) {
              $(this).val(requiredNameText);
        }
        if (this.selectionStart < requiredNameText.length) {
          this.selectionStart = requiredNameText.length;
        }
        $("#saveIdeaName input").keyup(function(){
          $("#saveIdeaName .charactersRemaining").text((30 + requiredNameText.length - $(this).val().length) + " characters remaining");
        });
      }, false);

      // This is for the problem input
      var inputProb = $(".problem-slide form textarea");
      var requiredProbText = "The problem is ";
      $.each(inputProb, function(index, value){
        value.addEventListener ("mousedown", function () {
          if (String($(this).val()).indexOf(requiredProbText) == -1) {
                $(this).val(requiredProbText);
          }
          if (this.selectionStart < 15) {
            this.selectionStart = 15;
          }
        }, false);

        value.addEventListener ("keydown", function () {
          if (String($(this).val()).indexOf(requiredProbText) == -1) {
                $(this).val(requiredProbText);
          }
          if (this.selectionStart < 15) {
            this.selectionStart = 15;
          }
        }, false);
      })

      // This is for the first text input field in the add component modal
      var inputOne = $("#addIdeaComponent input#componentName")[0];
      var requiredCompTextOne = "The "
      $("#addIdeaComponent .compNameCharRemaining").text((200) + " characters remaining");
      inputOne.addEventListener ("mousedown", function () {
        if (String($(this).val()).indexOf(requiredCompTextOne) == -1 || String($(this).val()) == "The ...") {
              $(this).val(requiredCompTextOne);
        }
        if (this.selectionStart < requiredCompTextOne.length) {
          this.selectionStart = requiredCompTextOne.length;
        }
      }, false);

      inputOne.addEventListener ("keydown", function () {
        if (String($(this).val()).indexOf(requiredCompTextOne) == -1 || String($(this).val()) == "The ...") {
              $(this).val(requiredCompTextOne);
        }
        if (this.selectionStart < requiredCompTextOne.length) {
          this.selectionStart = requiredCompTextOne.length;
        }
        $("#addIdeaComponent input#componentName").keyup(function(){
          $("#addIdeaComponent .compNameCharRemaining").text((200 + requiredCompTextOne.length - $(this).val().length) + " characters remaining");
        });
      }, false);

      // This is for the second text input field in the add component modal
      var inputTwo = $("#addIdeaComponent input#componentDescription")[0];
      var requiredCompTextTwo = "This component is described as "
      $("#addIdeaComponent .compDescrCharRemaining").text((200) + " characters remaining");
      inputTwo.addEventListener ("mousedown", function () {
        if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
              $(this).val(requiredCompTextTwo);
        }
        if (this.selectionStart < "This component is described as ".length) {
          this.selectionStart = "This component is described as ".length;
        }
      }, false);

      inputTwo.addEventListener ("keydown", function () {
        if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
              $(this).val(requiredCompTextTwo);
        }
        if (this.selectionStart < "This component is described as ".length) {
          this.selectionStart = "This component is described as ".length;
        }
        $("#addIdeaComponent input#componentDescription").keyup(function(){
          $("#addIdeaComponent .compDescrCharRemaining").text((200 + requiredCompTextTwo.length - $(this).val().length) + " characters remaining");
        });
      }, false);

      $("#aptitudeSubmit").click(function(event){
        event.preventDefault();
        if($("#aptitudeTitle").val() != ""){
          var newAptitude = $("#aptitudeTitle").val().trim();
          $.post('/save-aptitude', 
            {
              _csrf : $('[name="_csrf"]').val(),
              ideaName : "!{idea.name}",
              aptitudeTitle : newAptitude
            },
            function(resp) {
              window.location.href= "/ideas/!{idea.name}/edit?r="+(new Date())+"#add-aptitudes-row";
            });
        } else {
          alert("Please enter a valid aptitude.");
        }
      });

      $("#exposeIdeaNow").click(function(event){
        $.get("/expose-idea-seed", function(err, response){
          window.location.reload(true);
        });
      })


      $("#visibilityLink").click(function(event){
        $("#filePatentModal").modal('show');
      })

      if($("#fileInput [type='file']").length > 0){

        $("#fileInput [type='file']")[0].onchange = function(event) {
          $("<img id='spinner' src='/spinner.gif'>").insertAfter("#formImageUpload");
          const files = $("#fileInput [type='file']")[0].files;
          const file = files[0];
          const csrf = $("input[name='_csrf']").val();
          if(file == null){
            return alert('No file selected.');
          }
          var fr   = new FileReader;
          
          fr.onloadend = function() {
            // get EXIF data
            var exif = EXIF.readFromBinaryFile(this.result);

            if(file.size < 3000000){
              getSignedRequest(file, exif, csrf);
            } else if (file.size > 3000000){
              alert('Please choose an image smaller than 3 MB.')
            } else {
              alert('An error ocurred with this image.')
            }

          };

          fr.readAsArrayBuffer(file); // read the file


        };

        function uploadFile(file, signedRequest, url, exif, csrf){
          const xhr = new XMLHttpRequest();
          xhr.open('PUT', signedRequest);
          xhr.onreadystatechange = function() {
            if(xhr.readyState === 4){
              if(xhr.status === 200 && (file.type=="image/jpeg" || file.type=="image/png")){
                var data = {"filename" : file.name, "fileUrl" : url, "type" : file.type,
                  exif : exif, "_csrf" : csrf };
                $.post('/image-upload', data , function(response, status){
                  window.location.reload(true);
                });
              }
              else{
                alert('Could not upload file.');
              }
            }
          };
          xhr.send(file);
        }

        function getSignedRequest(file, exif, csrf){
          const xhr = new XMLHttpRequest();
          var filename = file.name.split(".");
          filename[0] = filename[0] + "-" + Date.now().toString();
          filename = filename.join(".");
          xhr.open('GET', '/sign-s3?file-name='+ filename + '&file-type='+ file.type);
          xhr.onreadystatechange = function() {
            if(xhr.readyState === 4 && xhr.responseText != ""){
              if(xhr.status === 200){
                var response = JSON.parse(xhr.responseText);
                uploadFile(file, response.signedRequest, response.url, exif, csrf);
              }
              else{
                alert('Could not get signed URL.');
              }
            } 
            
          };
          xhr.send();
        }
      }

      $(document).on('click', '.next-step a', function(event){
          event.preventDefault();

          $('html, body').animate({
              scrollTop: $( $.attr(this, 'href') ).offset().top
          }, 500);
      });

      $("#upload-image-next-btn").click(function(event){
        event.preventDefault();

        var data = {
          _csrf : $('[name="_csrf"]').val(),
          newEditingSection : "annotate-images-row",
          ideaName : "!{idea.name}"
        }

        $.post("/add-idea-editing-section", data, function(data, response){
          window.location.href= "/ideas/!{idea.name}/edit?r="+(new Date())+"#annotate-images-row";
        });

      });

      $("#annotate-image-next-btn").click(function(event){
        event.preventDefault();

        var data = {
          _csrf : $('[name="_csrf"]').val(),
          newEditingSection : "add-components-row",
          ideaName : "!{idea.name}"
        }

        $.post("/add-idea-editing-section", data, function(data, response){
          window.location.href= "/ideas/!{idea.name}/edit?r="+(new Date())+"#add-components-row";
        });
      });    

      $("#add-components-next-btn").click(function(event){
        event.preventDefault();

        var data = {
          _csrf : $('[name="_csrf"]').val(),
          newEditingSection : "add-aptitudes-row",
          ideaName : "!{idea.name}"
        }

        $.post("/add-idea-editing-section", data, function(data, response){
          window.location.href= "/ideas/!{idea.name}/edit?r="+(new Date())+"#add-aptitudes-row";
        });
      });

      $("#add-aptitudes-next-btn").click(function(event){
        event.preventDefault();

        var data = {
          _csrf : $('[name="_csrf"]').val(),
          newEditingSection : "add-imperfections-row",
          ideaName : "!{idea.name}"
        }

        $.post("/add-idea-editing-section", data, function(data, response){
          window.location.href= "/ideas/!{idea.name}/edit?r="+(new Date())+"#add-imperfections-row";
        });
      });

      $(window).on('scroll',function(){
        // we round here to reduce a little workload
        var stop = Math.round($(window).scrollTop());
        if (stop > 100) {
            $('.sticky-edit-header').removeClass('hidden');
        } else {
            $('.sticky-edit-header').addClass('hidden');
        }
      });

      var stop = Math.round($(window).scrollTop());
      if (stop > 100) {
          $('.sticky-edit-header').removeClass('hidden');
      } else {
          $('.sticky-edit-header').addClass('hidden');
      }

      $.getJSON("/university-majors.json", function(data){
        var majorName, words = [];
        var majorsArray = _.map(data, function(object){
           majorName = object['Major']
           words = majorName.toLowerCase().split(' ');;
            for(var i = 0; i < words.length; i++){
              words[i] = words[i].split('');
              words[i][0] = words[i][0].toUpperCase(); 
              words[i] = words[i].join('');
            }
            return words.join(' ');
        });

        $("#aptitudeTitle").autocomplete({
          source : majorsArray,
          appendTo : "#saveAptitude .form-group"
        });
      });
    });
