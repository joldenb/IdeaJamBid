doctype html
html
  head
    include ../partials/head.jade
  body
  .header.navbar.navbar-default
    include ../partials/header.jade

  .component-summary.container
    .col-md-4
      if(!imageURLs)
        div
          img(src="/avatar.png" height="150" width="150")
      .imagesList
        if(imageURLs)
          if !component['mainImage']['amazonURL'] && idea.name && idea.inventorName == user.username
            form(role='form', id="formImageUpload" action="/add-component-image", method="post", data-idea-doc=idea, enctype="multipart/form-data")
              .form-group
                input#fileInput(type="file", name="picture")
                input(type="hidden" id="image-component-identifier" name="imageComponent", value="#{component['identifier']}")
                input(type="hidden" id="image-component" name="componentProfilePage", value="true")
                input(type="hidden", name="_csrf", value="#{csrfToken}")

          each imageURL, index in imageURLs
            if index == 0
              .image-summary-image
                img(src=imageURL[1] height="300" width="400")

      if component.mainImage && component.mainImage.amazonURL
        img#component-main-image(src=component.mainImage.amazonURL)
      if component['text'] && component['number']
        .component-name
          h1 Component # #{component['number']} : #{component['text'].charAt(0).toUpperCase() + component['text'].slice(1)}
      else if component['text']
        .component-name
          h1 #{component['text']}
      else
        .component-name
          if (component['descriptions'][0])
            h3 The suggestion of #{component['descriptions'][0]}

      if parentComponents && parentComponents.length > 0
        each parent, index in parentComponents
          h5 A subcomponent of #{parent['text'] || parent['descriptions'][0] || "No parent component name"}
        
      if !component['text']
        button(type="button" id="compTitleModalButton" class="btn btn-primary" data-toggle="modal" data-target="#addTitleModal") Add Title
      else if (componentContributor)
        p Contributed by #[a(href='/imagineer/'+ componentContributor.nickname) #{componentContributor.nickname}]
  
      if ideaInventor
        h4 Part of <b>#[a(href='/ideas/'+ idea.name) #{idea.name}]</b> by #[a(href='/imagineer/'+ ideaInventor.nickname) #{ideaInventor.nickname}] 
      .return-button
        a.home-logout.btn.btn-industry.btn-lg( href="/ideas/#{idea.name}") Back to Idea Summary
      br
        

    .edit-column.col-md-8
      .component-descriptions
        if component.text && component.descriptions && component.descriptions[0]
          h3 The #{component.text.toLowerCase()} of <b>#[a(href='/ideas/'+ idea.name) #{idea.name}]</b> is #{component.descriptions[0]}.
          if ( component['descriptions'].length > 1)
            h4 Additionally, the #{component.text} can be described as : 
            ul
              each description, index in component['descriptions']
                if index > 0
                  li #{description}
          else
            ul
              li.no-descriptions No More Descriptions Yet
          a.btn.btn-industry#addAnotherDescription Add Additional Description
          if idea.name && idea.inventorName == user.username
            form.add-another-description-form(role='form', id="addDescription" action="/add-description", method="post", data-idea-doc=idea, style="display:none;")
              .row
                .col-sm-8
                  input.form-control(name="description", id="description")
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                .col-sm-4
                  button.btn.btn-success#submit(type='submit') Save Description
            p.add-another-description-form(style="display:none;") (Example: 'a mechanism to create a nuclear reaction to generate 1.21 gigawatts of power')
        else if component.text
          h3 Describe the #{component.text.toLowerCase()} component of <b>#[a(href='/ideas/'+ idea.name) #{idea.name}]</b>:
          if idea.name && idea.inventorName == user.username
            form(role='form', id="addDescription" action="/add-description", method="post", data-idea-doc=idea)
              .row
                .col-sm-8
                  input.form-control(name="description", id="description")
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                .col-sm-4
                  button.btn.btn-success#submit(type='submit') Save Description
            p (Example: "The Mr. Fusion is a portable power plant that creates a nuclear reaction to generate 1.21 gigawatts of power")

  
      .idea-function-column
        if(problem != "none")
          br
          h4 Related Imperfection
          #idea-summary-problems
            include ../partials/problem-summary-element.jade

        //- .component-variants
        //-   br
        //-   h4 Included in Variants
        //-   if variantDates.length > 0
        //-     each variantDate in variantDates
        //-       ul.variantDateList
        //-         li
        //-           a(href="/ideas/#{idea.name}/variant/"+variantDate[1]) #{variantDate[0]}
        //-   else 
        //-     p <i>Not currently part of any variants</i>
      .component-dimensions
        if( component['dimensions'].length > 0)
          h3 The dimensions of #{component.text} are #{component['dimensions'][0]}.
          if( component['dimensions'].length  > 1)
            h4 Additionally, #{component.text} can be made to these dimensions:
            ul
              each dimension, index in component['dimensions']
                if dimension && index > 0
                  li #{dimension}
          a.btn.btn-industry#showDimensions Add Additional Dimensions
          if idea.name && idea.inventorName == user.username
            form(role='form', id="addDimension" action="/add-dimension", method="post", data-idea-doc=idea, style="display:none;")
              .row
                .col-sm-8
                  p#no-dimension-value-entered(style="display:none;") Please enter valid dimensions
                  input.form-control(name="dimension", id="dimension")
                  p (Example: "The Mr. Fusion is 15 inches wide, 36 inches tall, and 15 inches deep")
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                .col-sm-4
                  button.btn.btn-success#dimensionSubmit(type='submit') Save Dimensions
        else
          h3 Dimensions of #{component.text}:
          if idea.name && idea.inventorName == user.username
            form(role='form', id="addDimension" action="/add-dimension", method="post", data-idea-doc=idea)
              .row
                .col-sm-8
                  p#no-dimension-value-entered(style="display:none;") Please enter a valid dimension
                  input.form-control(name="dimension", id="dimension")
                  p (Example: "The Mr. Fusion is 15 inches wide, 36 inches tall, and 15 inches deep")
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                .col-sm-4
                  button.btn.btn-success#dimensionSubmit(type='submit') Save Dimensions


      .component-materials
        if( component['materials'].length > 0)
          h3 The #{component.text} is ideally made of #{component['materials'][0]}.
          if( component['materials'].length > 1)
            h4 Additionally, #{component.text} can be made of:
            ul
              each material, index in component['materials']
                if material && index > 0
                  li #{material}
          a.btn.btn-industry#showMaterials Add Additional Materials
          if idea.name && idea.inventorName == user.username
            form(role='form', id="addMaterial" action="/add-material", method="post", data-idea-doc=idea, style="display:none;")
              .row
                .col-sm-8
                  p#no-material-value-entered(style="display:none;") Please enter a valid material
                  input.form-control(name="material", id="material")
                  p (Examples: "The Mr. Fusion is ideally made of titanium" or "The Mr. Fusion is ideally made of an alloy comprising at least 15% Molybdenum, 15% Chromium, and 5% Iron")
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                .col-sm-4
                  button.btn.btn-success#materialSubmit(type='submit') Save Materials
        else
          h3 Materials of #{component.text}:
          if idea.name && idea.inventorName == user.username
            form(role='form', id="addMaterial" action="/add-material", method="post", data-idea-doc=idea)
              .row
                .col-sm-8
                  p#no-material-value-entered(style="display:none;") Please enter a valid material
                  input.form-control(name="material", id="material")
                  p (Examples: "The Mr. Fusion is ideally made of titanium" or "The Mr. Fusion is ideally made of an alloy comprising at least 15% Molybdenum, 15% Chromium, and 5% Iron")
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                .col-sm-4
                  button.btn.btn-success#materialSubmit(type='submit') Save Materials

      if idea.name && idea.inventorName == user.username
        .related-components
          h4 Related Components
          if relatedComponents.length > 0
            each thisComponent in relatedComponents
              if thisComponent[0]['text']            
                if thisComponent[0]['identifier']
                  li 
                    a(href="/component-profile/"+thisComponent[0]['identifier'])
                      h4.compName #{thisComponent[0]['number']} : #{thisComponent[0]['text']}
                    p <b>Relationship</b> 
                    p #{thisComponent[1].charAt(0).toUpperCase() + thisComponent[1].slice(1)}
                    if thisComponent[2]
                      h5 Sub-Component
                      p #{thisComponent[2]}
                else
                  li 
                    h4.compName #{thisComponent[0]['number']} : #{thisComponent[0]['text']}
                    p <b>Relationship</b> 
                    p #{thisComponent[1].charAt(0).toUpperCase() + thisComponent[1].slice(1)}
                    if thisComponent[2]
                      h5 Sub-Component
                      p #{thisComponent[2]}
              else if thisComponent[0]['descriptions'].length > 0
                if thisComponent[0]['identifier']
                  li
                    a(href="/component-profile/"+thisComponent[0]['identifier'])
                      h4.compName #{thisComponent[0]['descriptions'][0]}
                    p <b>Relationship</b> 
                    p #{thisComponent[1].charAt(0).toUpperCase() + thisComponent[1].slice(1)}
                    if thisComponent[2]
                      h5 Sub-Component
                      p #{thisComponent[2]}
              else
                  li
                    h4.compName #{thisComponent[0]['descriptions'][0]}
                    p <b>Relationship</b> 
                    p #{thisComponent[1].charAt(0).toUpperCase() + thisComponent[1].slice(1)}
                    if thisComponent[2]
                      h5 Subcomponent
                      p #{thisComponent[2]}
          else
            div <i>No related components yet</i>
          button(type="button" id="modalButton" class="btn btn-primary" data-toggle="modal" data-target="#myModal") Add a New Related Component
          button(type="button" id="componentModalButton" class="btn btn-primary" data-toggle="modal" data-target="#addComponentModal") Add a New Subcomponent

    #addComponentModal.modal.fade.annotate-modal(role="dialog")
      .modal-dialog
        .modal-content
          .modal-header
            button(type="button", class="close" data-dismiss="modal") &times;
            .modal-title 
              h2 #{user.nickname}, add a new subcomponent of the #{component['text']}
          .modal-body
            form(role='form', id="addIdeaComponent" action="/add-idea-component", method="post", style='max-width: 450px;', data-idea-doc=idea)
              .form-group
                h4 What is your new subcomponent called?
                input#componentName.form-control(type="text", name="componentName", value='The subcomponent named the ')
                input(type="hidden", name="_csrf", value="#{csrfToken}")
                p (Example: "The subcomponent named the destination time display")
                if componentName
                  h4 How does your #{componentName['text']} work?
                else
                  h4 How does your new subcomponent work?
                input#componentDescription.form-control(type="text", name="componentDescription", value='This subcomponent works by ')
                p (Example: "This subcomponent works by displaying the time you wish to travel to.")
                p.compDescrCharRemaining
              .modal-footer
                button.btn.btn-go.btn-block.btn-lg#componentSubmit(type='submit') Save Subcomponent
                button.btn.btn-info.btn-block.btn-lg(data-dismiss="modal") Cancel


    #myModal.modal.fade.annotate-modal(role="dialog")
      .modal-dialog
        .modal-content
          .modal-header
            button(type="button", class="close" data-dismiss="modal") &times;
            .modal-title 
              h2 Add a Related Component:
          .modal-body
            form(role='form', id="addRelatedComponent" action="/add-related-component", method="post", style='max-width: 450px;', data-idea-doc=idea)
              .form-group
                h4 #{user.nickname}, select another <b>#[a(href='/ideas/'+ idea.name) #{idea.name}]</b> component that this #{component['text']} component relates to:
                |  
                input(type="hidden", name="_csrf", value="#{csrfToken}")
                select(name="addRelatedComponent").form-control#relatedComponents
                  option(value="None Selected") None Selected
                  each thisComponent in components
                    if thisComponent['identifier'] && thisComponent['text']!=component['text']
                      if thisComponent['text']
                        option(value=thisComponent['identifier']) #{thisComponent['number']} : #{thisComponent['text']}
                      else if thisComponent['descriptions'].length > 0
                        if thisComponent['identifier']
                          option(value=thisComponent['identifier']) #{thisComponent['descriptions'][0]}
                #relatedCompDescription
                  h4#new-related-component-description Describe the relationship of these components:
                  |  
                  textarea.form-control(rows='6', cols="75", name="newRelatedComponentDesc", id="newRelCompDesc")
                  p Example: "The Flux Capacitor relates to the Mr. Fusion by channeling the 1.21 gigawatts captured by Mr. Fusion through the time circuits of the Flux Capacitor."
                  p#charactersRemaining 200 characters remaining.
                  br
                  input(type="checkbox", name="subComponent")
                  span#sub-component-checkbox
                input(type="hidden" id="component-identifier" name="component-identifier" value="#{component['identifier']}")

              .modal-footer
                button.btn.btn-info(data-dismiss="modal") Cancel
                button.btn.btn-success#newRelCompSubmit(type='submit') Save Component Relationship
                  img.einstein-point-btn-icon(src="/single-einstein-point.png")
                // This needs a fix here - crashing the app when no specific related component selected in the drop down but the submit button is clicked anyway

    #addTitleModal.modal.fade.annotate-modal(role="dialog")
      .modal-dialog
        .modal-content
          .modal-header
            button(type="button", class="close" data-dismiss="modal") &times;
            .modal-title 
              h2 #{user.nickname}, add a title for this component:
          .modal-body
            form(role='form', id="addComponentTitle" action="/add-component-title", method="post", data-idea-doc=idea)
              .form-group
                input(type="hidden", name="_csrf", value="#{csrfToken}")
                input.form-control(name="compTitle", id="compTitle" value="The ...")
                input(type="hidden" id="title-component-identifier" name="component-identifier" value="#{component['identifier']}")
                p (Example: "Pizza hydrator")

              .modal-footer
                button.btn.btn-info(data-dismiss="modal") Cancel
                button.btn.btn-success#componentTitleSubmit(type='submit') Save Component Title

  script(src='/exif.js')
  include ../partials/js-includes.jade
  script(type="text/javascript").
    $("#modalButton").click(function(){
      $("#component-identifier").val("!{component['identifier']}");
      $("#addRelatedComponent #relatedCompDescription").hide();
    });

    $("#relatedComponents").change(function(){
      if($(".compName:contains('" + $("#relatedComponents option:selected").text() + "')").length){
        var also = " also";
      } else {
        var also = "";
      }
      var otherCompName = $("#relatedComponents option:selected").text();
      if(!isNaN(otherCompName.substring(0,1))){
        otherCompName = otherCompName.split(":")[1].substring(1);
      }
      if(otherCompName.indexOf("component is") > -1){
        otherCompName = otherCompName.substring(24);
      }
      if(otherCompName.indexOf("solution of") > -1){
        otherCompName = otherCompName.substring(16);
      }

      $("#relatedCompDescription").show();
      if("!{component['text']}" != ""){
        var thisCompName = "!{component['text']}";
        if(thisCompName.indexOf("component is") > -1){
          thisCompName = thisCompName.substring(24);
        }
        if(thisCompName.indexOf("solution of") > -1){
          thisCompName = thisCompName.substring(16);
        }
        $("#addRelatedComponent textarea").val("The " + thisCompName + also + " relates to the "+ otherCompName + " by ");
      } else {
        var thisCompName = "!{component['descriptions'][0]}";
        if(thisCompName.indexOf("component is") > -1){
          thisCompName = thisCompName.substring(24);
        }
        if(thisCompName.indexOf("solution of") > -1){
          thisCompName = thisCompName.substring(16);
        }
        $("#addRelatedComponent textarea").val("The " + thisCompName + also + " relates to the "+ otherCompName+ " by ");
      }

      // updated text for the sub-component checkbox
      $("#sub-component-checkbox").text(" Check this if the "+ otherCompName + " component is a subcomponent of the " + thisCompName + " component.");

      var input = document.getElementsByTagName ("textarea");

      // This is for the main solution text input
      var requiredText = $("#addRelatedComponent textarea").val();
      input[0].addEventListener ("mousedown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < $("#addRelatedComponent textarea").val().length) {
          this.selectionStart = $("#addRelatedComponent textarea").val().length;
        }
      }, false);

      input[0].addEventListener ("keydown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < $("#addRelatedComponent textarea").val().length) {
          this.selectionStart = $("#addRelatedComponent textarea").val().length;
        }
      }, false);
    
      $("#newRelCompDesc").keyup(function(){
        $("#charactersRemaining").text((200 + requiredText.length - $(this).val().length) + " characters remaining");
      })
    });

    if(document.getElementById("fileInput")){
      document.getElementById("fileInput").onchange = function(event) {
        $("<img id='spinner' src='/spinner.gif'>").insertAfter("#formImageUpload");
        const files = document.getElementById('fileInput').files;
        const file = files[0];
        if(file == null){
          return alert('No file selected.');
        }
        var fr   = new FileReader;
        
        fr.onloadend = function() {
          // get EXIF data
          var exif = EXIF.readFromBinaryFile(this.result);

          if(file.size < 3000000){
            getSignedRequest(file, exif);
          } else if (file.size > 3000000){
            alert('Please choose an image smaller than 3 MB.')
          } else {
            alert('An error ocurred with this image.')
          }

        };
        fr.readAsArrayBuffer(file); // read the file
      }
    

      function uploadFile(file, signedRequest, url, exif){
        const xhr = new XMLHttpRequest();
        xhr.open('PUT', signedRequest);
        xhr.onreadystatechange = function() {
          if(xhr.readyState === 4){
            if(xhr.status === 200 && (file.type=="image/jpeg" || file.type=="image/png")){
              var data = {
                "filename" : file.name,
                "fileUrl" : url,
                "type" : file.type,
                "_csrf" : $('[name="_csrf"]').val(),
                exif : exif,
                "componentProfilePage" : true,
                imageComponent : $("#image-component-identifier").val()
              };
              $.post('/add-component-image', data , function(response, status){
                window.location.replace(response["redirectURL"]);
              });
            }
            else{
              alert('Could not upload file.');
            }
          }
        };
        xhr.send(file);
      }

      function getSignedRequest(file, exif){
        const xhr = new XMLHttpRequest();
        var filename = file.name.split(".");
        filename[0] = filename[0] + "-" + Date.now().toString();
        filename = filename.join(".");
        xhr.open('GET', '/sign-s3?file-name='+ filename + '&file-type='+ file.type);
        xhr.onreadystatechange = function() {
          if(xhr.readyState === 4){
            if(xhr.status === 200){
              var response;
              if(xhr.responseText == ""){
                response = JSON.parse('{}');
              } else {
                response = JSON.parse(xhr.responseText);
              }
              uploadFile(file, response.signedRequest, response.url, exif);
            }
            else{
              alert('Could not get signed URL.');
            }
          } 
          
        };
        xhr.send();
      }
    }

    $("#description").val("The !{component.text || 'untitled'} is ");
    // This is for the main solution text input
    var requiredText = $("#description").val();
    if($("#description").length > 0){
      $("#description")[0].addEventListener ("mousedown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < 16) {
          this.selectionStart = 16;
        }
      }, false);

      $("#description")[0].addEventListener ("keydown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < 16) {
          this.selectionStart = 16;
        }
      }, false);
    }


    $("#addDescription #submit").click(function(event){
      event.preventDefault();
      if($("#description").val().slice(requiredText.length) != ""){
        var data = {
          "_csrf" : $('[name="_csrf"]').val(),
          "description" : $("#description").val().slice(requiredText.length),
          "component-identifier" :  "!{component['identifier']}"
        }
        $.post("/add-description", data, function(response){
          if(response=="OK"){
            location.reload();
          } else {
            alert("Not submitted successfully");
          }
        });
      } 
    });


    $(document).ready(function(){
      if("!{component.text}" == ""){
        $('#addTitleModal').modal('show');
      }

      $(".upvote-imperfection").click(function(event){
        event.preventDefault();

          $.post('/upvote-imperfection', 
          {
            _csrf : $('[name="_csrf"]').val(),
            problem : $(this)[0].dataset['problemId']
          },
          function(data, response) {
            window.location.reload(true);          
          });
        return false;
      });        
    });

    $("#showDimensions").click(function(){
      $("#addDimension").show(400)
      $("#showDimensions").hide()
    })
    $("#showMaterials").click(function(){
      $("#addMaterial").show(400)
      $("#showMaterials").hide()
    })    

    $("#addAnotherDescription").click(function(event){
      $("#addAnotherDescription").hide();
      $(".add-another-description-form").show(400);
    })

    if("!{component.materials.length > 0}" == "false"){
      $("#material").val("The !{component.text || 'untitled'} is ideally made of ");
    } else {
      $("#material").val("The !{component.text || 'untitled'} could also be made of ");
    }
    
    // This is for the main solution text input
    var requiredMaterialText = $("#material").val();
    $("#material")[0].addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredMaterialText) == -1) {
            $(this).val(requiredMaterialText);
      }
      if (this.selectionStart < requiredMaterialText.length) {
        this.selectionStart = requiredMaterialText.length;
      }
    }, false);

    $("#material")[0].addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredMaterialText) == -1) {
            $(this).val(requiredMaterialText);
      }
      if (this.selectionStart < requiredMaterialText.length) {
        this.selectionStart = requiredMaterialText.length;
      }
    }, false);

    if("!{component.dimensions.length > 0}" == "true"){
      $("#dimension").val("The dimensions of !{component.text || 'untitled'} could additionally be ");
    } else {
      $("#dimension").val("The ideal dimensions of !{component.text || 'untitled'} are ");
    }
    // This is for the main solution text input
    var requiredDimensionText = $("#dimension").val();
    $("#dimension")[0].addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredDimensionText) == -1) {
            $(this).val(requiredDimensionText);
      }
      if (this.selectionStart < requiredDimensionText.length) {
        this.selectionStart = requiredDimensionText.length;
      }
    }, false);

    $("#dimension")[0].addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredDimensionText) == -1) {
            $(this).val(requiredDimensionText);
      } 
      if (this.selectionStart < requiredDimensionText.length) {
        this.selectionStart = requiredDimensionText.length;
      }
    }, false);




    $("#dimensionSubmit").click(function(event){
      event.preventDefault();
      if($("#dimension").val() == "") {
        $("#no-dimension-value-entered").show(400);
      } else {
        var data = {
          "_csrf" : $('[name="_csrf"]').val(),
          "dimension" : $("#dimension").val().slice(requiredDimensionText.length),
          "component-identifier" :  "!{component['identifier']}"
        }
        $.post("/add-dimension", data, function(response){
          if(response=="OK"){
            location.reload();
          } else {
            alert("Not submitted successfully");
          }
        });
      }
    });


    $("#materialSubmit").click(function(event){
      event.preventDefault();
      if($("#material").val() == "") {
        $("#no-material-value-entered").show(400);
      } else {
        var data = {
        "_csrf" : $('[name="_csrf"]').val(),
        "material" : $("#material").val().slice(requiredMaterialText.length),
        "component-identifier" :  "!{component['identifier']}"
        }
        $.post("/add-material", data, function(response){
          if(response=="OK"){
            location.reload();
          } else {
            alert("Not submitted successfully");
          }
        });
      }
    });

    // This is for the idea name
    var inputName = $("#addComponentTitle input#compTitle")[0];
    var requiredNameText = "The "
    inputName.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1 || String($(this).val()) == "The ...") {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < requiredNameText.length) {
        this.selectionStart = requiredNameText.length;
      }
    }, false);

    inputName.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredNameText) == -1) {
            $(this).val(requiredNameText);
      }
      if (this.selectionStart < requiredNameText.length) {
        this.selectionStart = requiredNameText.length;
      }
    }, false);


    $("#componentTitleSubmit").click(function(event){
      event.preventDefault();
      if($("#addComponentTitle input[name='inventionName']").val() == "The ..." &&
        $("#titleRequiredMessage").length == 0){
          $("<p id='titleRequiredMessage'>A title is required</p>").insertBefore("#addComponentTitle input#compTitle");
      } else {
        $.post('/add-component-title', 
          {
            _csrf : $('[name="_csrf"]').val(),
            compTitle : $("#addComponentTitle input#compTitle").val().slice(4).trim(),
            "component-identifier" : $("#title-component-identifier").val()
          },
          function(response){
            window.location.reload(true);
          });
      }
    })

    $("#componentSubmit").click(function(event){
      event.preventDefault();

      if($("#componentName").val() == "The ..." || $("#componentName").val() == "The "){
        $("#addComponentModal").modal('hide');
      } else {
        var newComponentName = $("#componentName").val().trim();
        var newComponentDescr = "";
        if($("#componentDescription").val().length > 20){
          newComponentDescr = $("#componentDescription").val().trim();
        }

        var data = {
            _csrf : $('[name="_csrf"]').val(),
            componentName : newComponentName.slice(4),
            componentDescription : newComponentDescr.slice(20)
        };
        data['subComponent'] = "on";
        data['componentParent'] = "!{component.identifier}"

        $.post('/add-idea-component', 
          data,
          function(data, response) {
            window.location.reload(true);
          });      
      }

    });

    // This is for the first text input field in the add component modal
    var inputOne = $("#addIdeaComponent input#componentName")[0];
    var requiredCompTextOne = "The "
    $("#addIdeaComponent .compNameCharRemaining").text((200) + " characters remaining");
    inputOne.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1 || String($(this).val()) == "The ...") {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < requiredCompTextOne.length) {
        this.selectionStart = requiredCompTextOne.length;
      }
    }, false);

    inputOne.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextOne) == -1 || String($(this).val()) == "The ...") {
            $(this).val(requiredCompTextOne);
      }
      if (this.selectionStart < requiredCompTextOne.length) {
        this.selectionStart = requiredCompTextOne.length;
      }
      $("#addIdeaComponent input#componentName").keyup(function(){
        $("#addIdeaComponent .compNameCharRemaining").text((200 + requiredCompTextOne.length - $(this).val().length) + " characters remaining");
      });
    }, false);

    // This is for the second text input field in the add component modal
    var inputTwo = $("#addIdeaComponent input#componentDescription")[0];
    var requiredCompTextTwo = "This subcomponent works by "
    $("#addIdeaComponent .compDescrCharRemaining").text((200) + " characters remaining");
    inputTwo.addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
    }, false);

    inputTwo.addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredCompTextTwo) == -1) {
            $(this).val(requiredCompTextTwo);
      }
      if (this.selectionStart < 21) {
        this.selectionStart = 21;
      }
      $("#addIdeaComponent input#componentDescription").keyup(function(){
        $("#addIdeaComponent .compDescrCharRemaining").text((200 + requiredCompTextTwo.length - $(this).val().length) + " characters remaining");
      });
    }, false);





