doctype html
html
  head
    include ../partials/head.jade
  body
  .header.navbar.navbar-default
    include ../partials/header.jade

  .component-summary.container
    .col-md-4
      if(!imageURLs)
        div
          img(src="/avatar.png" height="150" width="150")
      .imagesList
        if(imageURLs)
          if !component['mainImage'] && idea.name && idea.inventorName == user.username
            form(role='form', id="formImageUpload" action="/add-component-image", method="post", data-idea-doc=idea, enctype="multipart/form-data")
              .form-group
                input#fileInput(type="file", name="picture")
                input(type="hidden" id="image-component-identifier" name="imageComponent", value="#{component['identifier']}")
                input(type="hidden" id="image-component" name="componentProfilePage", value="true")
                input(type="hidden", name="_csrf", value="#{csrfToken}")

          each imageURL, index in imageURLs
            if index == 0
              .image-summary-image
                img(src=imageURL[1] height="300" width="400")

      if component['text'] && component['number']
        .component-name
          h1 Component # #{component['number']} : #{component['text']}
      else if component['text']
        .component-name
          h1 #{component['text']}
      else
        .component-name
          if (component['descriptions'][0])
            h3 The suggestion of #{component['descriptions'][0]}

      if parentComponents && parentComponents.length > 0
        each parent, index in parentComponents
          h5 A subcomponent of #{parent['text'] || parent['descriptions'][0] || "No parent component name"}
        
      if !component['text']
        button(type="button" id="compTitleModalButton" class="btn btn-primary" data-toggle="modal" data-target="#addTitleModal") Add Title
      else if (componentContributor)
        p Contributed by #[a(href='/imagineer/'+ componentContributor.nickname) #{componentContributor.nickname}]
  
      if ideaInventor
        h4 Part of <b>#[a(href='/ideas/'+ idea.name) #{idea.name}]</b> by #[a(href='/imagineer/'+ ideaInventor.nickname) #{ideaInventor.nickname}]

    .edit-column.col-md-8
      .component-descriptions
        if component.text && component.descriptions && component.descriptions[0]
          h3 The #{component.text.toLowerCase()} of <b>#[a(href='/ideas/'+ idea.name) #{idea.name}]</b> is #{component.descriptions[0]}.
          if ( component['descriptions'].length > 1)
            h4 In addition, the #{component.text} can be described as : 
            ul
              each description, index in component['descriptions']
                if index > 0
                  li #{description}
          else
            ul
              li.no-descriptions No More Descriptions Yet
          a.btn.btn-industry.btn-lg#addAnotherDescription Add Another Description
          if idea.name && idea.inventorName == user.username
            form.add-another-description-form(role='form', id="addDescription" action="/add-description", method="post", data-idea-doc=idea, style="display:none;")
              .row
                .col-sm-8
                  input.form-control(name="description", id="description")
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                .col-sm-4
                  button.btn.btn-success#submit(type='submit') Save
            p.add-another-description-form(style="display:none;") (Example: 'a mechanism to create a nuclear reaction to generate 1.21 gigawatts of power')
        else if component.text
          h3 Describe the #{component.text.toLowerCase()} of <b>#[a(href='/ideas/'+ idea.name) #{idea.name}]</b>:
          if idea.name && idea.inventorName == user.username
            form(role='form', id="addDescription" action="/add-description", method="post", data-idea-doc=idea)
              .row
                .col-sm-8
                  input.form-control(name="description", id="description")
                  input(type="hidden", name="_csrf", value="#{csrfToken}")
                .col-sm-4
                  button.btn.btn-success#submit(type='submit') Save
            p (Example: 'a mechanism to create a nuclear reaction to generate 1.21 gigawatts of power')

  
      .idea-function-column
        if(problem != "none")
          br
          h4 Related Imperfection
          #idea-summary-problems
            include ../partials/problem-summary-element.jade

        //- .component-variants
        //-   br
        //-   h4 Included in Variants
        //-   if variantDates.length > 0
        //-     each variantDate in variantDates
        //-       ul.variantDateList
        //-         li
        //-           a(href="/ideas/#{idea.name}/variant/"+variantDate[1]) #{variantDate[0]}
        //-   else 
        //-     p <i>Not currently part of any variants</i>
      .component-dimensions
        h3 In the best case, this component is produced to the dimensions of:
        if( component['dimensions'].length > 0)
          ul
            each dimension, index in component['dimensions']
              if dimension
                li #{dimension}
        else
          ul
            li.no-dimensions No Dimensions Yet
        a.btn.btn-industry.btn-lg#showDimensions Add Dimensions
        if idea.name && idea.inventorName == user.username
          form(role='form', id="addDimension" action="/add-dimension", method="post", data-idea-doc=idea, style="display:none;")
            .row
              .col-sm-8
                p#no-dimension-value-entered(style="display:none;") Please enter a valid dimension
                input.form-control(name="dimension", id="dimension",
                placeholder='Add dimension')
                p Example: '15 inches wide, 10 inches tall, and 5 inches deep' or 'a length of range 4-7 millimeters, a height of range 10-14 millimeters, and a depth of range 2-3 mm'
                input(type="hidden", name="_csrf", value="#{csrfToken}")
              .col-sm-4
                button.btn.btn-success#dimensionSubmit(type='submit') Save


      .component-materials
        h3 In the best case, the component incorporates this material:
        if( component['materials'].length > 0)
          ul
            each material, index in component['materials']
              if material
                li #{material}
        else
          ul
            li.no-materials No Materials Yet
        a.btn.btn-industry.btn-lg#showMaterials Add Materials
        if idea.name && idea.inventorName == user.username
          form(role='form', id="addMaterial" action="/add-material", method="post", data-idea-doc=idea, style="display:none;")
            .row
              .col-sm-8
                p#no-material-value-entered(style="display:none;") Please enter a valid material
                input.form-control(name="material", id="material",
                placeholder='Add material')
                p Example: 'Inconel Alloy C-276' or 'an alloy comprising at least 15% Molybdenum, 15% Chromium, and 5% Iron
                input(type="hidden", name="_csrf", value="#{csrfToken}")
              .col-sm-4
                button.btn.btn-success#materialSubmit(type='submit') Save
      .return-button
        a.home-logout.btn.btn-industry.btn-lg( href="/ideas/#{idea.name}") Back to Idea Summary
      br

      if idea.name && idea.inventorName == user.username
        .related-components
          h4 Related Components
          if relatedComponents.length > 0
            each thisComponent in relatedComponents
              if thisComponent[0]['text']            
                if thisComponent[0]['identifier']
                  li 
                    a(href="/component-profile/"+thisComponent[0]['identifier'])
                      h4.compName #{thisComponent[0]['number']} : #{thisComponent[0]['text']}
                    p <b>Relationship</b> 
                    p #{thisComponent[1]}
                    if thisComponent[2]
                      h5 Sub-Component
                      p #{thisComponent[2]}
                else
                  li 
                    h4.compName #{thisComponent[0]['number']} : #{thisComponent[0]['text']}
                    p <b>Relationship</b> 
                    p #{thisComponent[1]}
                    if thisComponent[2]
                      h5 Sub-Component
                      p #{thisComponent[2]}
              else if thisComponent[0]['descriptions'].length > 0
                if thisComponent[0]['identifier']
                  li
                    a(href="/component-profile/"+thisComponent[0]['identifier'])
                      h4.compName #{thisComponent[0]['descriptions'][0]}
                    p <b>Relationship</b> 
                    p #{thisComponent[1]}
                    if thisComponent[2]
                      h5 Sub-Component
                      p #{thisComponent[2]}
              else
                  li
                    h4.compName #{thisComponent[0]['descriptions'][0]}
                    p <b>Relationship</b> 
                    p #{thisComponent[1]}
                    if thisComponent[2]
                      h5 Sub-Component
                      p #{thisComponent[2]}
          else
            div <i>No related components yet</i>
          button(type="button" id="modalButton" class="btn btn-primary" data-toggle="modal" data-target="#myModal") Add New Related Component


    #myModal.modal.fade.annotate-modal(role="dialog")
      .modal-dialog
        .modal-content
          .modal-header
            button(type="button", class="close" data-dismiss="modal") &times;
            .modal-title 
              h2 Add a Related Component:
          .modal-body
            form(role='form', id="addRelatedComponent" action="/add-related-component", method="post", style='max-width: 340px;', data-idea-doc=idea)
              .form-group
                h4 Select another component of the invention that #{component['text']} relates to:
                |  
                input(type="hidden", name="_csrf", value="#{csrfToken}")
                select(name="addRelatedComponent").form-control#relatedComponents
                  option(value="None Selected") None Selected
                  each thisComponent in components
                    if thisComponent['identifier'] && thisComponent['text']!=component['text']
                      if thisComponent['text']
                        option(value=thisComponent['identifier']) #{thisComponent['number']} : #{thisComponent['text']}
                      else if thisComponent['descriptions'].length > 0
                        if thisComponent['identifier']
                          option(value=thisComponent['identifier']) #{thisComponent['descriptions'][0]}
                #relatedCompDescription
                  h4#new-related-component-description Describe the relationship
                  |  
                  textarea.form-control(rows='6', cols="75", name="newRelatedComponentDesc", id="newRelCompDesc")
                  p Example: The Flux Capacitor relates to the Mr. Fusion by channeling the 1.21 gigawatts captured by Mr. Fusion through the time circuits of the Flux Capacitor.
                  p#charactersRemaining 200 characters remaining.
                  h4 Sub-Component
                  input(type="checkbox", name="subComponent")
                  span#sub-component-checkbox
                input(type="hidden" id="component-identifier" name="component-identifier")

              .modal-footer
                button.btn.btn-info(data-dismiss="modal") Cancel
                button.btn.btn-success#newRelCompSubmit(type='submit') Submit (+20)

    #addTitleModal.modal.fade.annotate-modal(role="dialog")
      .modal-dialog
        .modal-content
          .modal-header
            button(type="button", class="close" data-dismiss="modal") &times;
            .modal-title 
              h2 Add a title for this component:
          .modal-body
            form(role='form', id="addComponentTitle" action="/add-component-title", method="post", data-idea-doc=idea)
              .form-group
                input(type="hidden", name="_csrf", value="#{csrfToken}")
                input.form-control(name="compTitle", id="compTitle",
                  placeholder='Enter title here')
                input(type="hidden" id="component-identifier" name="component-identifier" value="#{component['identifier']}")
                p Ex. "Pizza hydrator"

              .modal-footer
                button.btn.btn-info(data-dismiss="modal") Cancel
                button.btn.btn-success(type='submit') Save

  script(src='/exif.js')
  include ../partials/js-includes.jade
  script(type="text/javascript").
    $("#modalButton").click(function(){
      $("#component-identifier").val("!{component['identifier']}");
      $("#addRelatedComponent #relatedCompDescription").hide();
    });

    $("#relatedComponents").change(function(){
      if($(".compName:contains('" + $("#relatedComponents option:selected").text() + "')").length){
        var also = " also";
      } else {
        var also = "";
      }
      var otherCompName = $("#relatedComponents option:selected").text();
      if(!isNaN(otherCompName.substring(0,1))){
        otherCompName = otherCompName.split(":")[1].substring(1);
      }
      if(otherCompName.indexOf("component is") > -1){
        otherCompName = otherCompName.substring(24);
      }
      if(otherCompName.indexOf("solution of") > -1){
        otherCompName = otherCompName.substring(16);
      }

      $("#relatedCompDescription").show();
      if("!{component['text']}" != ""){
        var thisCompName = "!{component['text']}";
        if(thisCompName.indexOf("component is") > -1){
          thisCompName = thisCompName.substring(24);
        }
        if(thisCompName.indexOf("solution of") > -1){
          thisCompName = thisCompName.substring(16);
        }
        $("#addRelatedComponent textarea").val("The " + thisCompName + also + " relates to "+ otherCompName + " by ");
      } else {
        var thisCompName = "!{component['descriptions'][0]}";
        if(thisCompName.indexOf("component is") > -1){
          thisCompName = thisCompName.substring(24);
        }
        if(thisCompName.indexOf("solution of") > -1){
          thisCompName = thisCompName.substring(16);
        }
        $("#addRelatedComponent textarea").val("The " + thisCompName + also + " relates to "+ otherCompName+ " by ");
      }

      // updated text for the sub-component checkbox
      $("#sub-component-checkbox").text("The "+ otherCompName + " is a sub-component of " + thisCompName + ".");

      var input = document.getElementsByTagName ("textarea");

      // This is for the main solution text input
      var requiredText = $("#addRelatedComponent textarea").val();
      input[0].addEventListener ("mousedown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < $("#addRelatedComponent textarea").val().length) {
          this.selectionStart = $("#addRelatedComponent textarea").val().length;
        }
      }, false);

      input[0].addEventListener ("keydown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < $("#addRelatedComponent textarea").val().length) {
          this.selectionStart = $("#addRelatedComponent textarea").val().length;
        }
      }, false);
    
      $("#newRelCompDesc").keyup(function(){
        $("#charactersRemaining").text((200 + requiredText.length - $(this).val().length) + " characters remaining");
      })
    });

    if(document.getElementById("fileInput")){
      document.getElementById("fileInput").onchange = function(event) {
        $("<img id='spinner' src='/spinner.gif'>").insertAfter("#formImageUpload");
        const files = document.getElementById('fileInput').files;
        const file = files[0];
        if(file == null){
          return alert('No file selected.');
        }
        var fr   = new FileReader;
        
        fr.onloadend = function() {
          // get EXIF data
          var exif = EXIF.readFromBinaryFile(this.result);

          if(file.size < 3000000){
            getSignedRequest(file, exif);
          } else if (file.size > 3000000){
            alert('Please choose an image smaller than 3 MB.')
          } else {
            alert('An error ocurred with this image.')
          }

        };
        fr.readAsArrayBuffer(file); // read the file
      }
    

      function uploadFile(file, signedRequest, url, exif){
        const xhr = new XMLHttpRequest();
        xhr.open('PUT', signedRequest);
        xhr.onreadystatechange = function() {
          if(xhr.readyState === 4){
            if(xhr.status === 200 && (file.type=="image/jpeg" || file.type=="image/png")){
              var data = {
                "filename" : file.name,
                "fileUrl" : url,
                "type" : file.type,
                "_csrf" : $('[name="_csrf"]').val(),
                exif : exif,
                "componentProfilePage" : true,
                imageComponent : $("#image-component-identifier").val()
              };
              $.post('/add-component-image', data , function(response, status){
                window.location.replace(response["redirectURL"]);
              });
            }
            else{
              alert('Could not upload file.');
            }
          }
        };
        xhr.send(file);
      }

      function getSignedRequest(file, exif){
        const xhr = new XMLHttpRequest();
        var filename = file.name.split(".");
        filename[0] = filename[0] + "-" + Date.now().toString();
        filename = filename.join(".");
        xhr.open('GET', '/sign-s3?file-name='+ filename + '&file-type='+ file.type);
        xhr.onreadystatechange = function() {
          if(xhr.readyState === 4){
            if(xhr.status === 200){
              var response;
              if(xhr.responseText == ""){
                response = JSON.parse('{}');
              } else {
                response = JSON.parse(xhr.responseText);
              }
              uploadFile(file, response.signedRequest, response.url, exif);
            }
            else{
              alert('Could not get signed URL.');
            }
          } 
          
        };
        xhr.send();
      }
    }

    $("#description").val("The !{component.text || 'untitled'} is ");
    // This is for the main solution text input
    var requiredText = $("#description").val();
    $("#description")[0].addEventListener ("mousedown", function () {
      if (String($(this).val()).indexOf(requiredText) == -1) {
            $(this).val(requiredText);
      }
      if (this.selectionStart < 16) {
        this.selectionStart = 16;
      }
    }, false);

    $("#description")[0].addEventListener ("keydown", function () {
      if (String($(this).val()).indexOf(requiredText) == -1) {
            $(this).val(requiredText);
      }
      if (this.selectionStart < 16) {
        this.selectionStart = 16;
      }
    }, false);


    $("#addDescription #submit").click(function(event){
      event.preventDefault();
      var data = {
        "_csrf" : $('[name="_csrf"]').val(),
        "description" : $("#description").val().slice(requiredText.length),
        "component-identifier" :  "!{component['identifier']}"
      }
      $.post("/add-description", data, function(response){
        if(response=="OK"){
          location.reload();
        } else {
          alert("Not submitted successfully");
        }
      });
    });

    $("#dimensionSubmit").click(function(event){
      event.preventDefault();
      if($("#dimension").val() == "") {
        $("#no-dimension-value-entered").show(400);
      } else {
        var data = {
          "_csrf" : $('[name="_csrf"]').val(),
          "dimension" : $("#dimension").val(),
          "component-identifier" :  "!{component['identifier']}"
        }
        $.post("/add-dimension", data, function(response){
          if(response=="OK"){
            location.reload();
          } else {
            alert("Not submitted successfully");
          }
        });
      }
    });


    $("#materialSubmit").click(function(event){
      event.preventDefault();
      if($("#material").val() == "") {
        $("#no-material-value-entered").show(400);
      } else {
        var data = {
        "_csrf" : $('[name="_csrf"]').val(),
        "material" : $("#material").val(),
        "component-identifier" :  "!{component['identifier']}"
        }
        $.post("/add-material", data, function(response){
          if(response=="OK"){
            location.reload();
          } else {
            alert("Not submitted successfully");
          }
        });
      }
    });

    $(document).ready(function(){
      $(".upvote-imperfection").click(function(event){
        event.preventDefault();

          $.post('/upvote-imperfection', 
          {
            _csrf : $('[name="_csrf"]').val(),
            problem : $(this)[0].dataset['problemId']
          },
          function(data, response) {
            window.location.reload(true);          
          });
        return false;
      });        
    });

    $("#showDimensions").click(function(){
      $("#addDimension").show(400)
      $("#showDimensions").hide()
    })
    $("#showMaterials").click(function(){
      $("#addMaterial").show(400)
      $("#showMaterials").hide()
    })    

    $("#addAnotherDescription").click(function(event){
      $("#addAnotherDescription").hide();
      $(".add-another-description-form").show(400);
    })





