doctype html
html
  head
    include ../partials/head.jade
  body
  .header.navbar.navbar-default
    include ../partials/header.jade

  .component-summary.container
    .col-md-4
      h1 Component Summary
      if component['text']
        .component-name
          if component['number']
            h3 Component # #{component['number']} : #{component['text']}
          else
            .component-name
              h3 Name : #{component['number']}
      h4 It is a component of the idea seed "#{idea.name}"
      .imagesList
        if(imageURLs)
          h4 Uploaded Images
          if !component['mainImage']
            form(role='form', id="formImageUpload" action="/add-component-image", method="post", data-idea-doc=idea, enctype="multipart/form-data")
              .form-group
                p Upload Component Image
                |  
                input#fileInput(type="file", name="picture")
                input(type="hidden" id="image-component-identifier" name="imageComponent", value="#{component['identifier']}")
                input(type="hidden" id="image-component" name="componentProfilePage", value="true")
                input(type="hidden", name="_csrf", value="#{csrfToken}")

          each imageURL, index in imageURLs
            if index == 0
              .image-summary-image
                img(src=imageURL[1] height="300" width="400")
                p(style="margin-top:1em;") Other images containing this component
            if index < 3 && index > 0
              img.imageListItems(src=imageURL[1] style=imageURL[2])
          .view-all-images-btn
            a.btn.btn-default( href="/image-upload" ) View All Images


    .edit-column.col-md-8
      .component-descriptions
        h3 Description(s)
        if( component['descriptions'].length > 0)
          ul
            each description, index in component['descriptions']
              li #{index+1}. #{description}
              br
        else
          ul
            li.no-descriptions No Descriptions Yet
            br
        form(role='form', id="addDescription" action="/add-description", method="post", data-idea-doc=idea)
          h5#new-idea-description Add a New Description:
          |  
          input.form-control(name="description", id="description",
            placeholder='Describe the new component...')
          input(type="hidden", name="_csrf", value="#{csrfToken}")
          |  
          button.btn.btn-success#submit(type='submit') Submit

      .related-components
        h4 Related Components
        each component in relatedComponents
          if component[0]['text']            
            if component[0]['identifier']
              li 
                a(href="/component-profile/"+component[0]['identifier'])
                  h4.compName #{component[0]['number']} : #{component[0]['text']}
                p <b>Relationship</b> 
                p #{component[1]}
            else
              li 
                h4.compName #{component[0]['number']} : #{component[0]['text']}
                p <b>Relationship</b> 
                p #{component[1]}
          else if component[0]['descriptions'].length > 0
            if component[0]['identifier']
              li
                a(href="/component-profile/"+component[0]['identifier'])
                  h4.compName #{component[0]['descriptions'][0]}
                p <b>Relationship</b> 
                p #{component[1]}
          else
              li
                h4.compName #{component[0]['descriptions'][0]}
                p <b>Relationship</b> 
                p #{component[1]}
        button(type="button" id="modalButton" class="btn btn-primary" data-toggle="modal" data-target="#myModal") Add New Related Component


      .idea-function-column.half-column
        if(problem != "none")
          h4 Related Problem
          .image-block-element
            .suggestion
              .suggestion-text
                p <b>Problem: </b> #{problem['text']}
                p <b>Problem Area: </b> #{problem['problemArea']}
                p <b>Suggestion Type: </b> #{component['category']}

              .suggestion-category
                ul
                  li
                    p <b> Hindsight :</b> #{component['hindsight'] || "No value yet"} 
                  li
                    p <b> Foresight :</b> #{component['foresight'] || "No value yet"} 
                  li
                    p <b> Outsight :</b> #{component['outsight'] || "No value yet"} 
            .suggestion-maker
              if problemHeadshotURL != ""
                img(src=problemHeadshotURL height="50" width="50")
              else
                img(src="/avatar.png" height="50" width="50")
              div.userName #{problem['creator'] || "Unknown User"}

        .component-variants
          h4 Included in Variants
          if variantDates.length > 0
            each variantDate in variantDates
              ul.variantDateList
                li
                  a(href="/ideas/#{idea.name}/variant/"+variantDate[1]) #{variantDate[0]}
          else 
            p <i>Not currently part of any variants</i>
      .return-button
        a.home-logout.btn.btn-default( href="/ideas/#{idea.name}") < Back to Idea Summary
      br

    #myModal.modal.fade.annotate-modal(role="dialog")
      .modal-dialog
        .modal-content
          .modal-header
            button(type="button", class="close" data-dismiss="modal") &times;
            .modal-title 
              h2 Add a Related Component:
          .modal-body
            form(role='form', id="addRelatedComponent" action="/add-related-component", method="post", style='max-width: 340px;', data-idea-doc=idea)
              .form-group
                h4 Select another component of the invention that #{component['text']} relates to:
                |  
                input(type="hidden", name="_csrf", value="#{csrfToken}")
                select(name="addRelatedComponent").form-control#relatedComponents
                  option(value="None Selected") None Selected
                  each thisComponent in components
                    if thisComponent['identifier'] && thisComponent['text']!=component['text']
                      if thisComponent['text']
                        option(value=thisComponent['identifier']) #{thisComponent['number']} : #{thisComponent['text']}
                      else if thisComponent['descriptions'].length > 0
                        if thisComponent['identifier']
                          option(value=thisComponent['identifier']) #{thisComponent['descriptions'][0]}
                #relatedCompDescription
                  h4#new-related-component-description These components are related by:
                  |  
                  textarea.form-control(rows='6', cols="75", name="newRelatedComponentDesc", id="newRelCompDesc")
                  p Example: The Flux Capacitor relates to the Mr. Fusion by channeling the 1.21 gigawatts captured by Mr. Fusion through the time circuits of the Flux Capacitor.
                  p#charactersRemaining 200 characters remaining.
                input(type="hidden" id="component-identifier" name="component-identifier")

              .modal-footer
                button.btn.btn-info(data-dismiss="modal") Cancel
                button.btn.btn-success#newRelCompSubmit(type='submit') Submit (+20)



  include ../partials/js-includes.jade
  script(type="text/javascript").
    $("#modalButton").click(function(){
      $("#component-identifier").val("!{component['identifier']}");
      $("#addRelatedComponent #relatedCompDescription").hide();
    });

    $("#relatedComponents").change(function(){
      if($(".compName:contains('" + $("#relatedComponents option:selected").text() + "')").length){
        var also = " also";
      } else {
        var also = "";
      }
      var otherCompName = $("#relatedComponents option:selected").text();
      if(!isNaN(otherCompName.substring(0,1))){
        otherCompName = otherCompName.split(":")[1].substring(1);
      }
      if(otherCompName.indexOf("component is") > -1){
        otherCompName = otherCompName.substring(24);
      }
      if(otherCompName.indexOf("solution of") > -1){
        otherCompName = otherCompName.substring(16);
      }

      $("#relatedCompDescription").show();
      if("!{component['text']}" != ""){
        var thisCompName = "!{component['text']}";
        if(thisCompName.indexOf("component is") > -1){
          thisCompName = thisCompName.substring(24);
        }
        if(thisCompName.indexOf("solution of") > -1){
          thisCompName = thisCompName.substring(16);
        }
        $("#addRelatedComponent textarea").val("The " + thisCompName + also + " relates to "+ otherCompName + " by ");
      } else {
        var thisCompName = "!{component['descriptions'][0]}";
        if(thisCompName.indexOf("component is") > -1){
          thisCompName = thisCompName.substring(24);
        }
        if(thisCompName.indexOf("solution of") > -1){
          thisCompName = thisCompName.substring(16);
        }
        $("#addRelatedComponent textarea").val("The " + thisCompName + also + " relates to "+ otherCompName+ " by ");
      }

      var input = document.getElementsByTagName ("textarea");

      // This is for the main solution text input
      var requiredText = $("#addRelatedComponent textarea").val();
      input[0].addEventListener ("mousedown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < $("#addRelatedComponent textarea").val().length) {
          this.selectionStart = $("#addRelatedComponent textarea").val().length;
        }
      }, false);

      input[0].addEventListener ("keydown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < $("#addRelatedComponent textarea").val().length) {
          this.selectionStart = $("#addRelatedComponent textarea").val().length;
        }
      }, false);
    
      $("#newRelCompDesc").keyup(function(){
        $("#charactersRemaining").text((200 + requiredText.length - $(this).val().length) + " characters remaining");
      })
    });

    if($("#fileInput").length > 0){
      document.getElementById("fileInput").onchange = function(event) {
        const files = document.getElementById('fileInput').files;
        const file = files[0];
        if(file == null){
          return alert('No file selected.');
        }

        if(file.size < 3000000){
          getSignedRequest(file);
        } else if (file.size > 3000000){
          alert('Please choose an image smaller than 3 MB.')
        } else {
          alert('An error ocurred with this image.')
        }
      };
    }

    function uploadFile(file, signedRequest, url){
      const xhr = new XMLHttpRequest();
      xhr.open('PUT', signedRequest);
      xhr.onreadystatechange = function() {
        if(xhr.readyState === 4){
          if(xhr.status === 200 && (file.type=="image/jpeg" || file.type=="image/png")){
            var data = {"filename" : file.name, "fileUrl" : url, "type" : file.type, "_csrf" : $('[name="_csrf"]').val(),
            "componentProfilePage" : true, imageComponent : $("#image-component-identifier").val() };
            $.post('/add-component-image', data , function(response, status){
              window.location.replace(response["redirectURL"]);
            });
          }
          else{
            alert('Could not upload file.');
          }
        }
      };
      xhr.send(file);
    }

    function getSignedRequest(file){
      const xhr = new XMLHttpRequest();
      xhr.open('GET', '/sign-s3?file-name='+file.name + '&file-type='+ file.type);
      xhr.onreadystatechange = function() {
        if(xhr.readyState === 4){
          if(xhr.status === 200){
            var response;
            if(xhr.responseText == ""){
              response = JSON.parse('{}');
            } else {
              response = JSON.parse(xhr.responseText);
            }
            uploadFile(file, response.signedRequest, response.url);
          }
          else{
            alert('Could not get signed URL.');
          }
        } 
        
      };
      xhr.send();
    }

    $("#addDescription #submit").click(function(event){
      event.preventDefault();
      var data = {
        "_csrf" : $('[name="_csrf"]').val(),
        "description" : $("#description").val(),
        "component-identifier" :  "!{component['identifier']}"
      }
      $.post("/add-description", data, function(response){
        if(response=="OK"){
          location.reload();
        } else {
          alert("Not submitted successfully");
        }
      });
    });