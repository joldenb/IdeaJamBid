doctype html
html
  head
    include ../partials/head.jade
  body
  .header.navbar.navbar-default
    include ../partials/header.jade

  .container.imperfection-summary-container
    .row.imperfection-summary
      h2 Improve
        a( href="/ideas/#{idea.name}")  #{idea.name} 
        span by solving #{problem.text}.
      span by: 
        a.nickname( href="/imagineer/#{problemCreator.nickname}") 
          img(src="/avatar.png" height="30" width="30") 
          span #{problemCreator.nickname}
        div
          if schoolNetwork
            #[a(class="network-link" href="/jam/#{schoolNetwork}") #{schoolNetwork}]   
          if companyNetwork
            #[a(class="network-link" href="/jam/#{companyNetwork}") #{companyNetwork}]   
          if locationNetwork
            #[a(class="network-link" href="/jam/#{locationNetwork}") #{locationNetwork}]

      .col-sm-6.desktop-buttons-with-tooltip
        h3#suggestion-question-header How will you:
        form(role='form', id="formSuggestion" action="/suggestion-submit-new", method="post", data-idea-doc=idea)
          .form-group
            input(type="hidden", name="_csrf", value="#{csrfToken}")
            div#suggestion-tactics(class="btn-group" role="group" aria-label="suggestionTactic" data-toggle="buttons")
              h4.suggestion-number 1.
              each value in tactics
                label.btn.btn-go.btn-lg.suggestion-tactics( title="Max points : #{value[1]}" data-toggle="tooltip" data-placement="right")
                  input(type="checkbox" value=value[0])
                  | #{value[0]}

            div#suggestion-targets(class="btn-group" role="group" aria-label="suggestionTarget" data-toggle="buttons")
              h4.suggestion-number 2.
              each value in targetPoints
                label.btn.btn-go.btn-lg.suggestion-targets.disabled(style="background-color : #00A550 !important;" title="" data-toggle="tooltip" data-placement="right" id="#{value[1]}-target")
                  input.target-inputs(type="checkbox" value=value[0] disabled)
                  | #{value[0]}

          h3#end-of-suggestion-query to help solve the imperfection of 
            <span class="problemColor">#{problem.text}?</span>
            h4#suggestion-input-header.suggestion-number 3.
            input.form-control.suggestion-input(type="text", name="suggestionText", value='By ' disabled)
            p.charactersRemaining
          .row.suggestion-form-buttons
            .col-xs-12
              img.ideajam-spinner(src="/IdeaJam-logo.gif" style="display:none;")
              button.btn.btn-go.btn-lg.btn-block#submit(type='submit') Save Solution  
                img(src="/single-einstein-point.png" height="25" width="25")
          //- .row.suggestion-form-buttons
          //-   .col-xs-12.add-picture-btn
          //-     label#add-picture-button.btn.btn-vision.btn-lg.btn-block
          //-       input(type="file" name="picture" style="display: none;")
          //-       | Add Picture
          .row.suggestion-form-buttons
            .col-xs-12
              button#reset-suggestion-form.btn.btn-industry.btn-lg.btn-block(type="button") Reset Form

      .col-sm-6.mobile-buttons-with-tooltip
        h3#suggestion-question-header How will you:
        form(role='form', id="formSuggestion" action="/suggestion-submit-new", method="post", data-idea-doc=idea)
          .form-group
            input(type="hidden", name="_csrf", value="#{csrfToken}")
            div#suggestion-tactics(class="btn-group" role="group" aria-label="suggestionTactic" data-toggle="buttons")
              h4.suggestion-number 1.
              each value in tactics
                label.btn.btn-go.btn-lg.suggestion-tactics
                  input(type="checkbox" value=value[0])
                  | #{value[0]}

            div#suggestion-targets(class="btn-group" role="group" aria-label="suggestionTarget" data-toggle="buttons")
              h4.suggestion-number 2.
              each value in targetPoints
                label.btn.btn-go.btn-lg.suggestion-targets.disabled(style="background-color : #00A550 !important;")
                  input.target-inputs(type="checkbox" value=value[0] disabled)
                  | #{value[0]}

          h3#end-of-suggestion-query to help solve the imperfection of 
            <span class="problemColor">#{problem.text}?</span>
            h4#suggestion-input-header.suggestion-number 3.
            input.form-control.suggestion-input(type="text", name="suggestionText", value='By ' disabled)
            p.charactersRemaining
          .row.suggestion-form-buttons
            .col-xs-12
              img.ideajam-spinner(src="/IdeaJam-logo.gif" style="display:none;")
              button.btn.btn-go.btn-lg.btn-block#submit(type='submit') Save Solution  
                img(src="/single-einstein-point.png" height="25" width="25")
          //- .row.suggestion-form-buttons
          //-   .col-xs-12.add-picture-btn
          //-     label#add-picture-button.btn.btn-vision.btn-lg.btn-block
          //-       input(type="file" name="picture" style="display: none;")
          //-       | Add Picture
          .row.suggestion-form-buttons
            .col-xs-12
              button#reset-suggestion-form.btn.btn-industry.btn-lg.btn-block(type="button") Reset Form


      .col-sm-6
        #existing-suggestion-list.edit-column
          h3 Other Suggestions
          if( suggestions.length > 0)
            ul
              each suggestion, identifier in wholeSuggestionBlockInfo
                li                
                  include ../partials/suggestion-summary-element.jade
          else
            ul
              li.no-descriptions No Descriptions Yet

include ../partials/js-includes.jade
script(src='/exif.js')
script(type="text/javascript").
  $(document).ready(function(){
    $("#formSuggestion").submit(function(event){
      event.preventDefault();
      var tacticVal = $(".suggestion-tactics.selected input").val();
      var targetVal = $(".suggestion-targets.selected input").val();
      if(tacticVal && targetVal){
        $("form .ideajam-spinner").show();
        $("#submit").hide();
        if( $("input[name='suggestionText']").val().split(" ").length < 4 && 
          $("input[name='suggestionText']").val().split(" ")[$("input[name='suggestionText']").val().split(" ").length -1] == ""){
          window.location.reload();
        } else {
          var newSuggestion = $("input[name='suggestionText']").val().trim();

          var data = {
            "suggestionText" : newSuggestion,
            "problemArea" : "!{problem.problemArea}",
            "problemContributor" : "!{problem.creator}",
            "problemText" : "!{problem.text}",
            "tactic"  : tacticVal,
            "target"  : targetVal,
            "points"  : $(".suggestion-targets.selected input").parent().attr("data-points"),
            "ideaName" : "!{idea.name}",
            "_csrf"   : $("input[name=_csrf]").val()
          }

          if($("#suggestion-image-preview").length > 0){
            data['fileUrl'] = $("#suggestion-image-preview")[0].src;
            data['type'] = $("#suggestion-image-preview")[0].dataset.type;
            data['filename'] = $("#suggestion-image-preview")[0].dataset.filename;
          }

          $.post('/suggestion-submit-new', data, function(error, response){
            window.location = "/ideas/!{idea.name}/view-all-suggestions";
          });
        }
      } else {
        alert('Tactic and Target Required');
      }
    });

    $(".suggestion-tactics").click(function(event){
      if($(".suggestion-tactics.active").length > 0){
        $(".suggestion-tactics.active").removeClass("active");
      }

      $(this).addClass("selected");

      if($(".suggestion-targets.disabled").length > 0){
        $(".suggestion-targets.active").removeClass("active");
      }

      var verb = "";
      switch($(this).text()){
        case "Eliminate" :
          verb = "eliminating ";
          $("#Functions-target").attr("title", "Earn !{categoryPoints['elim-func']} Points").attr("data-points", "!{categoryPoints['elim-func']}");
          $("#Life-Cycle-Processes-target").attr("title", "Earn !{categoryPoints['elim-life']} Points").attr("data-points", "!{categoryPoints['elim-life']}");
          $("#Parts-target").attr("title", "Earn !{categoryPoints['elim-parts']} Points").attr("data-points", "!{categoryPoints['elim-parts']}");
          $("#Materials-target").attr("title", "Earn !{categoryPoints['elim-mat']} Points").attr("data-points", "!{categoryPoints['elim-mat']}");
          $("#People-target").attr("title", "Earn !{categoryPoints['elim-people']} Points").attr("data-points", "!{categoryPoints['elim-people']}");
          break;
        case "Reduce" :
          verb = "reducing ";
          $("#Functions-target").attr("title", "Earn !{categoryPoints['reduce-func']} Points").attr("data-points", "!{categoryPoints['elim-func']}");
          $("#Life-Cycle-Processes-target").attr("title", "Earn !{categoryPoints['reduce-life']} Points").attr("data-points", "!{categoryPoints['elim-life']}");
          $("#Parts-target").attr("title", "Earn !{categoryPoints['reduce-parts']} Points").attr("data-points", "!{categoryPoints['elim-parts']}");
          $("#Materials-target").attr("title", "Earn !{categoryPoints['reduce-mat']} Points").attr("data-points", "!{categoryPoints['elim-mat']}");
          $("#People-target").attr("title", "Earn !{categoryPoints['reduce-people']} Points").attr("data-points", "!{categoryPoints['elim-people']}");
          break;
        case "Substitute" :
          verb = "substituting ";
          $("#Functions-target").attr("title", "Earn !{categoryPoints['sub-func']} Points").attr("data-points", "!{categoryPoints['elim-func']}");
          $("#Life-Cycle-Processes-target").attr("title", "Earn !{categoryPoints['sub-life']} Points").attr("data-points", "!{categoryPoints['elim-life']}");
          $("#Parts-target").attr("title", "Earn !{categoryPoints['sub-parts']} Points").attr("data-points", "!{categoryPoints['elim-parts']}");
          $("#Materials-target").attr("title", "Earn !{categoryPoints['sub-mat']} Points").attr("data-points", "!{categoryPoints['elim-mat']}");
          $("#People-target").attr("title", "Earn !{categoryPoints['sub-people']} Points").attr("data-points", "!{categoryPoints['elim-people']}");
          break;
        case "Separate" :
          verb = "separating ";
          $("#Functions-target").attr("title", "Earn !{categoryPoints['sep-func']} Points").attr("data-points", "!{categoryPoints['elim-func']}");
          $("#Life-Cycle-Processes-target").attr("title", "Earn !{categoryPoints['sep-life']} Points").attr("data-points", "!{categoryPoints['elim-life']}");
          $("#Parts-target").attr("title", "Earn !{categoryPoints['sep-parts']} Points").attr("data-points", "!{categoryPoints['elim-parts']}");
          $("#Materials-target").attr("title", "Earn !{categoryPoints['sep-mat']} Points").attr("data-points", "!{categoryPoints['elim-mat']}");
          $("#People-target").attr("title", "Earn !{categoryPoints['sep-people']} Points").attr("data-points", "!{categoryPoints['elim-people']}");
          break;
        case "Integrate" :
          verb = "integrating ";
          $("#Functions-target").attr("title", "Earn !{categoryPoints['int-func']} Points").attr("data-points", "!{categoryPoints['elim-func']}");
          $("#Life-Cycle-Processes-target").attr("title", "Earn !{categoryPoints['int-life']} Points").attr("data-points", "!{categoryPoints['elim-life']}");
          $("#Parts-target").attr("title", "Earn !{categoryPoints['int-parts']} Points").attr("data-points", "!{categoryPoints['elim-parts']}");
          $("#Materials-target").attr("title", "Earn !{categoryPoints['int-mat']} Points").attr("data-points", "!{categoryPoints['elim-mat']}");
          $("#People-target").attr("title", "Earn !{categoryPoints['int-people']} Points").attr("data-points", "!{categoryPoints['elim-people']}");
          break;
        case "Re-Use" :
          verb = "reusing ";
          $("#Functions-target").attr("title", "Earn !{categoryPoints['reuse-func']} Points").attr("data-points", "!{categoryPoints['elim-func']}");
          $("#Life-Cycle-Processes-target").attr("title", "Earn !{categoryPoints['reuse-life']} Points").attr("data-points", "!{categoryPoints['elim-life']}");
          $("#Parts-target").attr("title", "Earn !{categoryPoints['reuse-parts']} Points").attr("data-points", "!{categoryPoints['elim-parts']}");
          $("#Materials-target").attr("title", "Earn !{categoryPoints['reuse-mat']} Points").attr("data-points", "!{categoryPoints['elim-mat']}");
          $("#People-target").attr("title", "Earn !{categoryPoints['reuse-people']} Points").attr("data-points", "!{categoryPoints['elim-people']}");
          break;
        case "Standardize" :
          verb = "standardizing ";
          $("#Functions-target").attr("title", "Earn !{categoryPoints['stand-func']} Points").attr("data-points", "!{categoryPoints['elim-func']}");
          $("#Life-Cycle-Processes-target").attr("title", "Earn !{categoryPoints['stand-life']} Points").attr("data-points", "!{categoryPoints['elim-life']}");
          $("#Parts-target").attr("title", "Earn !{categoryPoints['stand-parts']} Points").attr("data-points", "!{categoryPoints['elim-parts']}");
          $("#Materials-target").attr("title", "Earn !{categoryPoints['stand-mat']} Points").attr("data-points", "!{categoryPoints['elim-mat']}");
          $("#People-target").attr("title", "Earn !{categoryPoints['stand-people']} Points").attr("data-points", "!{categoryPoints['elim-people']}");
          break;
        case "Add" :
          verb = "adding ";
          $("#Functions-target").attr("title", "Earn !{categoryPoints['add-func']} Points").attr("data-points", "!{categoryPoints['elim-func']}");
          $("#Life-Cycle-Processes-target").attr("title", "Earn !{categoryPoints['add-life']} Points").attr("data-points", "!{categoryPoints['elim-life']}");
          $("#Parts-target").attr("title", "Earn !{categoryPoints['add-parts']} Points").attr("data-points", "!{categoryPoints['elim-parts']}");
          $("#Materials-target").attr("title", "Earn !{categoryPoints['add-mat']} Points").attr("data-points", "!{categoryPoints['elim-mat']}");
          $("#People-target").attr("title", "Earn !{categoryPoints['add-people']} Points").attr("data-points", "!{categoryPoints['elim-people']}");
          break;
      }

      $("#suggestion-question-header").text("How will you " + $(this).text().toLowerCase() + ":");

      $(".suggestion-input").remove();
      // This is for the main solution text input
      var requiredText = "By " + verb;
      var input = $("<input class='form-control suggestion-input' type='text' name='suggestionText' disabled>")
          .insertAfter("#suggestion-input-header")
          .val(requiredText);

      input[0].addEventListener ("mousedown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < requiredText.length) {
          this.selectionStart = requiredText.length;
        }
      }, false);

      input[0].addEventListener ("keydown", function () {
        if (String($(this).val()).indexOf(requiredText) == -1) {
              $(this).val(requiredText);
        }
        if (this.selectionStart < requiredText.length) {
          this.selectionStart = requiredText.length;
        }
      }, false);

      $(".disabled").removeAttr("style");
      $(".disabled").removeClass("disabled");
      $("#suggestion-tactics").hide(400);
    });


    $(".suggestion-targets").click(function(event){

      if(!$(this).hasClass("disabled")){

        if($(".suggestion-targets.active").length > 0){
          $(".suggestion-targets.active").removeClass("active");
        }

        $(this).addClass("selected");

        var verb = $(".suggestion-tactics.selected").text().toLowerCase();
        $("#suggestion-question-header").text("How will you " + verb + " " + $(this).text().toLowerCase() + " " + $("#end-of-suggestion-query").text() + "?");
        $("#end-of-suggestion-query").remove();
        $("#suggestion-targets").hide(400);

        $("#submit").append("<span>  + " + $(this).attr("data-points") + "</span>")

        document.getElementsByClassName('suggestion-input')[0].disabled = false;
      } 

    });


    if($("#add-picture-button input").length > 0){
      $("#add-picture-button input").change(function(event) {
        $("<img id='spinner' src='/IdeaJam-logo.gif'>").insertAfter("#formSuggestion");
        const files = $("#add-picture-button input")[0].files;
        const file = files[0];
        const csrf = $("input[name='_csrf']").val();
        if(file == null){
          return alert('No file selected.');
        }
        var fr   = new FileReader;
        
        fr.onloadend = function() {
          // get EXIF data
          var exif = EXIF.readFromBinaryFile(this.result);

          if(file.size < 3000000){
            getSignedRequest(file, exif, csrf);
          } else if (file.size > 3000000){
            alert('Please choose an image smaller than 3 MB.')
          } else {
            alert('An error ocurred with this image.')
          }

        };

        fr.readAsArrayBuffer(file); // read the file


      });

      function uploadFile(file, signedRequest, url, exif, csrf){
        const xhr = new XMLHttpRequest();
        xhr.open('PUT', signedRequest);
        xhr.onreadystatechange = function() {
          if(xhr.readyState === 4){
            if(xhr.status === 200 && (file.type=="image/jpeg" || file.type=="image/png")){
              var data = {"filename" : file.name, "fileUrl" : url, "type" : file.type,
                exif : exif, "_csrf" : csrf, suggestionPage : true };
                $("#spinner").remove();
                $("<img id='suggestion-image-preview' data-type='"+file.type+"' data-filename='"+file.name+"' src='" + url + "'>").insertAfter("#formSuggestion");
            }
            else{
              alert('Could not upload file.');
            }
          }
        };
        xhr.send(file);
      }

      function getSignedRequest(file, exif, csrf){
        const xhr = new XMLHttpRequest();
        var filename = file.name.split(".");
        filename[0] = filename[0] + "-" + Date.now().toString();
        filename = filename.join(".");
        xhr.open('GET', '/sign-s3?file-name='+ filename + '&file-type='+ file.type);
        xhr.onreadystatechange = function() {
          if(xhr.readyState === 4 && xhr.responseText != ""){
            if(xhr.status === 200){
              var response = JSON.parse(xhr.responseText);
              uploadFile(file, response.signedRequest, response.url, exif, csrf);
            }
            else{
              alert('Could not get signed URL.');
            }
          } 
          
        };
        xhr.send();
      }
    }

    $("#reset-suggestion-form").click(function(event){
      window.location.reload();
    });

    $(".upvote-suggestion").click(function(event){
      $(this).hide();
      $(this).prev().show();
      event.preventDefault();

      $.post('/upvote-suggestion', 
      {
        _csrf : $('[name="_csrf"]').val(),
        suggestion : $(this)[0].dataset['suggestionId']
      },
      function(data, response) {
        window.location.reload(true);
      });

      return false;
    });   

    $('[data-toggle="tooltip"]').tooltip();

    
  });
